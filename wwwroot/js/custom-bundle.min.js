// Account Tree JavaScript functionality
$(document).ready(function() {
    // Initialize tooltips safely for Bootstrap 5
    if (typeof bootstrap !== 'undefined' && $.fn.tooltip) {
        $('[data-bs-toggle="tooltip"]').tooltip();
    }
    
    // Auto focus first input when any modal is shown
    $('.modal').on('shown.bs.modal', function () {
        $(this).find('input:first').trigger('focus');
    });
    
    // Reset filters - generalized approach
    $('#resetFilters').on('click', function() {
        $('#filterSection').find('input, select').val('');
        // TODO: إعادة تحميل البيانات هنا
    });
    
    // Apply filters
    $('#applyFilters').on('click', function() {
        var nameFilter = $('#filter-name').val().toLowerCase();
        var phoneFilter = $('#filter-phone').val().toLowerCase();
        var accountFilter = $('#filter-account').val().toLowerCase();
        
        // In a real implementation, you would filter the tree data here
        alert('سيتم تطبيق الفلاتر: اسم الحساب "' + nameFilter + '", رقم الهاتف "' + phoneFilter + '", الحساب "' + accountFilter + '"');
    });
    
    // Refresh button
    $('#refreshBtn').on('click', function() {
        location.reload();
    });
    
    // Save account button - for the new accounts modal
    $('#accountTreeAccountsModal .btn-success').on('click', function() {
        // In a real implementation, you would submit the form data to the server
        alert('تم حفظ الحساب الجديد!');
        $('#accountTreeAccountsModal').modal('hide');
        // Reset form if needed
        $('#accountTreeAccountsModal form')[0].reset();
    });
    
    // Save edit account button
    $('#accountTreeSaveEditAccountBtn').on('click', function() {
        // In a real implementation, you would submit the form data to the server
        alert('تم حفظ التعديلات!');
        $('#accountTreeEditAccountModal').modal('hide');
    });
    
    // Edit from view modal
    $('#accountTreeEditFromViewBtn').on('click', function() {
        $('#accountTreeViewAccountModal').modal('hide');
        $('#accountTreeEditAccountModal').modal('show');
    });
    
    // Print account
    $('#accountTreePrintAccountBtn').on('click', function() {
        var accountName = $('#accountTreeViewAccountName').text();
        alert('طباعة بيانات الحساب: ' + accountName);
    });
    
    // Top action buttons
    $('#topViewButton').on('click', function(e) {
        e.preventDefault();
        alert('الرجاء تحديد حساب من الشجرة لعرضه');
    });
    
    $('#topEditButton').on('click', function(e) {
        e.preventDefault();
        alert('الرجاء تحديد حساب من الشجرة لتعديله');
    });
    
    // Popup menu actions
    $('#popupMenuModal').on('click', '.btn', function() {
        var buttonText = $(this).text().trim();
        
        if (buttonText.includes('تصدير')) {
            alert('تصدير شجرة الحسابات إلى ملف');
        } else if (buttonText.includes('طباعة')) {
            alert('طباعة تقارير الحسابات');
        } else if (buttonText.includes('بحث')) {
            alert('فتح نافذة البحث المتقدم');
        } else if (buttonText.includes('إعدادات')) {
            alert('فتح إعدادات شجرة الحسابات');
        } else if (buttonText.includes('مساعدة')) {
            alert('عرض دليل المستخدم ومساعدة النظام');
        }
    });
    
    // Handle view action from dropdown menu using delegated events
    $('tbody').on('click', '[data-action="view"]', function(e) {
        e.preventDefault();
        
        // Get the account data from the row
        var row = $(this).closest('tr');
        var accountName = row.find('td:nth-child(3)').text();
        var accountCode = row.find('td:nth-child(4)').text();
        var parentAccount = row.find('td:nth-child(5)').text();
        var accountType = row.find('td:nth-child(6)').text();
        var accountSide = row.find('td:nth-child(7)').text();
        var accountNature = row.find('td:nth-child(8)').text();
        
        // Populate the view modal with account data
        $('#accountTreeViewAccountName').text(accountName);
        $('#accountTreeViewAccountCode').text(accountCode);
        $('#accountTreeViewParentAccount').text(parentAccount);
        $('#accountTreeViewAccountType').text(accountType);
        $('#accountTreeViewAccountSide').text(accountSide);
        $('#accountTreeViewAccountNature').text(accountNature);
        // For group, employee - these would be populated from actual data
        $('#accountTreeViewGroup').text('غير محدد');
        $('#accountTreeViewEmployee').text('غير محدد');
        
        // Show the view modal
        $('#accountTreeViewAccountModal').modal('show');
    });
    
    // Handle edit action from dropdown menu using delegated events
    $('tbody').on('click', '[data-action="edit"]', function(e) {
        e.preventDefault();
        
        // Get the account data from the row
        var row = $(this).closest('tr');
        var accountName = row.find('td:nth-child(3)').text();
        var accountCode = row.find('td:nth-child(4)').text();
        var parentAccount = row.find('td:nth-child(5)').text();
        var accountType = row.find('td:nth-child(6)').text();
        var accountSide = row.find('td:nth-child(7)').text();
        var accountNature = row.find('td:nth-child(8)').text();
        
        // Populate the edit modal with account data
        $('#accountTreeEditAccountName').val(accountName);
        $('#accountTreeEditAccountCode').val(accountCode);
        
        // Set parent account selection
        $('#accountTreeEditParentAccount option').each(function() {
            if ($(this).text() === parentAccount) {
                $(this).prop('selected', true);
                return false;
            }
        });
        
        // Set account type selection
        if (accountType === 'أصول') {
            $('#accountTreeEditAccountTypeMain').prop('checked', true);
        } else {
            $('#accountTreeEditAccountTypeSub').prop('checked', true);
        }
        
        // Set account side selection
        if (accountSide === 'شمال') {
            $('#accountTreeEditSideNorth').prop('checked', true);
        } else if (accountSide === 'جنوب') {
            $('#accountTreeEditSideSouth').prop('checked', true);
        } else {
            $('#accountTreeEditSideNone').prop('checked', true);
        }
        
        // Set account nature selection
        if (accountNature === 'ميزانية عمومية') {
            $('#accountTreeEditNatureBalance').prop('checked', true);
        } else {
            $('#accountTreeEditNatureIncome').prop('checked', true);
        }
        
        // For group, employee - these would be set from actual data
        $('#accountTreeEditGroup').val('');
        $('#accountTreeEditEmployee').val('');
        
        // Show the edit modal
        $('#accountTreeEditAccountModal').modal('show');
    });
    
    // Handle view action from context menu
    function viewAccount(node) {
        // Populate the view modal with account data
        $('#accountTreeViewAccountName').text(node.text);
        $('#accountTreeViewAccountCode').text('1001'); // TODO: Replace with real account data from AJAX or server
        $('#accountTreeViewParentAccount').text('الأصول'); // TODO: Replace with real account data from AJAX or server
        $('#accountTreeViewAccountType').text('فرعي'); // TODO: Replace with real account data from AJAX or server
        $('#accountTreeViewAccountSide').text('بدون'); // TODO: Replace with real account data from AJAX or server
        $('#accountTreeViewAccountNature').text('ميزانية عمومية'); // TODO: Replace with real account data from AJAX or server
        $('#accountTreeViewGroup').text('غير محدد'); // TODO: Replace with real account data from AJAX or server
        $('#accountTreeViewEmployee').text('غير محدد'); // TODO: Replace with real account data from AJAX or server
        
        // Show the view modal
        $('#accountTreeViewAccountModal').modal('show');
    }
    
    // Handle edit action from context menu
    function editAccount(node) {
        // Populate the edit modal with account data
        $('#accountTreeEditAccountName').val(node.text);
        $('#accountTreeEditAccountCode').val('1001'); // TODO: Replace with real account data from AJAX or server
        $('#accountTreeEditParentAccount').val('1'); // TODO: Replace with real account data from AJAX or server
        $('#accountTreeEditAccountTypeSub').prop('checked', true); // TODO: Replace with real account data from AJAX or server
        $('#accountTreeEditSideNone').prop('checked', true); // TODO: Replace with real account data from AJAX or server
        $('#accountTreeEditNatureBalance').prop('checked', true); // TODO: Replace with real account data from AJAX or server
        $('#accountTreeEditGroup').val(''); // TODO: Replace with real account data from AJAX or server
        $('#accountTreeEditEmployee').val(''); // TODO: Replace with real account data from AJAX or server
        
        // Show the edit modal
        $('#accountTreeEditAccountModal').modal('show');
    }
    
    // Handle delete action from context menu
    function deleteAccount(node) {
        if (confirm('هل أنت متأكد من حذف هذا الحساب؟')) {
            // In a real application, you would send a request to the server to delete the account
            alert('تم حذف الحساب بنجاح!');
        }
    }
});
$(function () {
    // Variable to track the currently selected row
    let selectedRow = null;
    
    // Initialize DataTable
    const dt = $("#categoriesTable").DataTable({
        paging: true,
        lengthChange: false,
        searching: false,
        ordering: true,
        info: true,
        autoWidth: false,
        responsive: true,
        // Add buttons extension
        dom: 'Bfrtip',
        buttons: [
            {
                extend: 'print',
                text: 'طباعه',
                className: 'btn btn-outline-secondary btn-sm',
                exportOptions: {
                    columns: ':visible'
                }
            },
            {
                extend: 'colvis',
                text: 'تحديد الحقول',
                className: 'btn btn-outline-secondary btn-sm',
                collectionLayout: 'fixed two-column'
            },
            {
                extend: 'excelHtml5',
                text: 'تصدير اكسل',
                className: 'btn btn-outline-secondary btn-sm',
                exportOptions: {
                    columns: ':visible'
                }
            }
        ],
        language: {
            emptyTable: "لا توجد بيانات",
            info: "إظهار _START_ إلى _END_ من _TOTAL_ سجل",
            infoEmpty: "إظهار 0 إلى 0 من 0",
            paginate: { first:"الأولى", last:"الأخيرة", next:"التالي", previous:"السابق" },
            buttons: {
                colvis: 'تحديد الحقول',
                print: 'طباعه',
                excel: 'تصدير اكسل'
            }
        }
    });
    
    // Move buttons to filter section
    dt.buttons().container().appendTo('#datatables-buttons-container');
    
    // Hide the default buttons container since we're using custom buttons
    $('.dt-buttons').hide();
    
    // Reinitialize buttons when filter section is shown
    $('#toggleFilters').on('click', function() {
        setTimeout(function() {
            // Refresh button styles when filter section is toggled
            $('.dt-buttons .btn').addClass('btn-sm');
        }, 100);
    });
    
    // Ensure buttons are properly styled after initialization
    setTimeout(function() {
        $('.dt-buttons .btn').addClass('btn-sm');
    }, 500);
    
    // Handle filter toggle button
    $('#toggleFilters').on('click', function() {
        var filterSection = $('#filterSection');
        var icon = $(this).find('i');
        var textSpan = $('#toggleFiltersText');
        
        if (filterSection.is(':visible')) {
            // Hide the filter section
            filterSection.hide();
            icon.removeClass('ti-filter-off').addClass('ti-filter');
            textSpan.text('إظهار الفلترة');
        } else {
            // Show the filter section
            filterSection.show();
            icon.removeClass('ti-filter').addClass('ti-filter-off');
            textSpan.text('إخفاء الفلترة');
        }
    });
    
    // Initialize bootstrap-select for category selection with enhanced options
    function initializeSelectPicker() {
        $('.selectpicker').selectpicker({
            style: 'btn-light',
            liveSearch: true,
            liveSearchPlaceholder: 'ابحث...',
            noneSelectedText: 'لم يتم تحديد أي شيء',
            noneResultsText: 'لا توجد نتائج لـ {0}',
            selectAllText: 'تحديد الكل',
            deselectAllText: 'إلغاء تحديد الكل',
            dropupAuto: false,   // منع السلوك التلقائي
            width: '100%',
            container: 'body'    // إخراج القائمة خارج أي كارد/مودال
        });
    }
    
    // Initialize selectpickers when document is ready
    initializeSelectPicker();
    
    // Re-initialize bootstrap-select when modals are shown or hidden
    $('.modal').on('shown.bs.modal hidden.bs.modal', function () {
        $('.selectpicker').selectpicker('refresh');
    });

    // Handle reset filters button
    $('#resetFilters').on('click', function() {
        // Reset all filter input fields
        $('#filter-id').val('');
        $('#filter-from-amount').val('');
        $('#filter-to-amount').val('');
        $('#filter-percentage').val('');
        $('#filter-group').selectpicker('val', '');
        $('.selectpicker').selectpicker('refresh');
        alert('تم إعادة تعيين الفلاتر');
    });
    
    // Handle row selection
    $('#categoriesTable tbody').on('click', 'tr', function(e) {
        // Prevent row selection when clicking on action buttons or dropdowns
        if ($(e.target).closest('.dropdown-toggle, .dropdown-menu, .btn').length) {
            return;
        }
        
        // Toggle selection
        if ($(this).hasClass('selected')) {
            $(this).removeClass('selected');
            selectedRow = null;
        } else {
            // Remove selection from other rows
            $('#categoriesTable tbody tr.selected').removeClass('selected');
            $(this).addClass('selected');
            selectedRow = $(this);
        }
        
        // Enable/disable top action buttons based on selection
        if (selectedRow) {
            $('#topEditButton, #topViewButton').removeClass('disabled');
        } else {
            $('#topEditButton, #topViewButton').addClass('disabled');
        }
    });
    
    // Handle select all checkbox
    $('#selectAll').on('change', function() {
        const isChecked = $(this).is(':checked');
        $('.category-checkbox').prop('checked', isChecked);
        
        // If all rows are selected, enable top action buttons
        if (isChecked) {
            $('#topEditButton, #topViewButton').removeClass('disabled');
        } else {
            $('#topEditButton, #topViewButton').addClass('disabled');
            selectedRow = null;
        }
    });
    
    // Handle individual checkbox selection
    $('#categoriesTable tbody').on('change', '.category-checkbox', function() {
        // If any checkbox is checked, enable top action buttons
        if ($('.category-checkbox:checked').length > 0) {
            $('#topEditButton, #topViewButton').removeClass('disabled');
        } else {
            $('#topEditButton, #topViewButton').addClass('disabled');
            selectedRow = null;
        }
    });
    
    // Handle top action buttons
    $('#topEditButton').on('click', function(e) {
        e.preventDefault();
        if (selectedRow) {
            editCommission(selectedRow);
        } else {
            alert('الرجاء تحديد صف أولاً');
        }
    });
    
    $('#topViewButton').on('click', function(e) {
        e.preventDefault();
        if (selectedRow) {
            viewCommission(selectedRow);
        } else {
            alert('الرجاء تحديد صف أولاً');
        }
    });
    
    // Handle action buttons in the table
    $('#categoriesTable').on('click', '[data-action]', function (e) {
        e.preventDefault(); // Prevent default action
        const action = $(this).data('action');
        const row = $(this).closest('tr');
        
        switch (action) {
            case 'view':
                viewCommission(row);
                break;
            case 'edit':
                editCommission(row);
                break;
        }
    });
    
    // Function to view commission
    function viewCommission(row) {
        // In a real application, you would fetch the data from the server
        // For now, we'll just show the modal
        console.log('Showing view modal');
        $('#viewCommissionModal').modal('show');
    }
    
    // Function to edit commission
    function editCommission(row) {
        // In a real application, you would populate the form with data from the server
        // For now, we'll just show the modal
        console.log('Showing edit modal');
        $('#editCommissionModal').modal('show');
    }
    
    // Handle form submissions with AJAX
    $('#addCommissionForm, #editCommissionForm').on('submit', function (e) {
        e.preventDefault();
        
        const form = $(this);
        const formId = form.attr('id');
        const prefix = formId === 'addCommissionForm' ? 'add' : 'edit';
        
        // Get form data
        const formData = getFormData(prefix);
        
        // Validate form
        if (!validateForm(formData, prefix)) {
            return;
        }
        
        // Submit form via AJAX
        submitFormViaAjax(formData, prefix);
    });
    
    // Handle save button click in modal footer
    $('#addCommissionModal .modal-footer .btn-primary, #editCommissionModal .modal-footer .btn-primary').on('click', function () {
        const modal = $(this).closest('.modal');
        const form = modal.find('form');
        const formId = form.attr('id');
        const prefix = formId === 'addCommissionForm' ? 'add' : 'edit';
        
        // Get form data
        const formData = getFormData(prefix);
        
        // Validate form
        if (!validateForm(formData, prefix)) {
            return;
        }
        
        // Submit form via AJAX
        submitFormViaAjax(formData, prefix);
    });
    
    // Function to get form data
    function getFormData(prefix) {
        const data = {
            fromAmount: $(`#${prefix}-from-amount`).val(),
            toAmount: $(`#${prefix}-to-amount`).val(),
            group: $(`#${prefix}-group`).val(),
            percentage: $(`#${prefix}-percentage`).val(),
            networkInternet: $(`#${prefix}-network-internet`).is(':checked'),
            networkPhone: $(`#${prefix}-network-phone`).is(':checked'),
            networkForge: $(`#${prefix}-network-forge`).is(':checked')
        };
        
        return data;
    }
    
    // Function to validate form
    function validateForm(data, prefix) {
        let isValid = true;
        
        // Clear previous validation states
        $('.is-invalid').removeClass('is-invalid');
        $('.invalid-feedback').remove();
        
        // Validate required fields
        if (!data.fromAmount) {
            $(`#${prefix}-from-amount`).addClass('is-invalid');
            $(`#${prefix}-from-amount`).after('<div class="invalid-feedback">الرجاء إدخال مبلغ البداية</div>');
            isValid = false;
        }
        
        if (!data.toAmount) {
            $(`#${prefix}-to-amount`).addClass('is-invalid');
            $(`#${prefix}-to-amount`).after('<div class="invalid-feedback">الرجاء إدخال مبلغ النهاية</div>');
            isValid = false;
        }
        
        if (!data.group) {
            $(`#${prefix}-group`).addClass('is-invalid');
            $(`#${prefix}-group`).after('<div class="invalid-feedback">الرجاء اختيار المجموعة</div>');
            isValid = false;
        }
        
        if (!data.percentage) {
            $(`#${prefix}-percentage`).addClass('is-invalid');
            $(`#${prefix}-percentage`).after('<div class="invalid-feedback">الرجاء إدخال النسبة</div>');
            isValid = false;
        }
        
        // At least one network must be selected
        if (!data.networkInternet && !data.networkPhone && !data.networkForge) {
            $(`#${prefix}-network-internet`).after('<div class="invalid-feedback d-block">الرجاء اختيار شبكة واحدة على الأقل</div>');
            isValid = false;
        }
        
        return isValid;
    }
    
    // Function to submit form via AJAX
    function submitFormViaAjax(data, prefix) {
        // Show loading indicator
        const submitBtn = $(`#${prefix}CommissionModal .modal-footer .btn-primary`);
        const originalText = submitBtn.html();
        submitBtn.html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> جاري الحفظ...');
        submitBtn.prop('disabled', true);
        
        // In a real application, you would send the data to the server
        // For now, we'll simulate an AJAX call
        setTimeout(function () {
            // Reset button
            submitBtn.html(originalText);
            submitBtn.prop('disabled', false);
            
            // Close modal
            $(`#${prefix}CommissionModal`).modal('hide');
            
            // Show success message
            alert('تم حفظ البيانات بنجاح');
            
            // Reload the DataTable
            dt.ajax.reload();
        }, 1500);
    }
    
    // Handle edit from view modal
    $('#editFromViewBtn').on('click', function() {
        $('#viewCommissionModal').modal('hide');
        $('#editCommissionModal').modal('show');
    });
});
$(function () {
    // Variable to track the currently selected row
    let selectedRow = null;
    
    // Initialize DataTable
    const dt = $("#categoriesTable").DataTable({
        paging: true,
        lengthChange: false,
        searching: false,
        ordering: true,
        info: true,
        autoWidth: false,
        responsive: true,
        // Add buttons extension
        dom: 'Bfrtip',
        buttons: [
            {
                extend: 'print',
                text: 'طباعه',
                className: 'btn btn-outline-secondary btn-sm',
                exportOptions: {
                    columns: ':visible'
                }
            },
            {
                extend: 'colvis',
                text: 'تحديد الحقول',
                className: 'btn btn-outline-secondary btn-sm',
                collectionLayout: 'fixed two-column'
            },
            {
                extend: 'excelHtml5',
                text: 'تصدير اكسل',
                className: 'btn btn-outline-secondary btn-sm',
                exportOptions: {
                    columns: ':visible'
                }
            }
        ],
        language: {
            emptyTable: "لا توجد بيانات",
            info: "إظهار _START_ إلى _END_ من _TOTAL_ سجل",
            infoEmpty: "إظهار 0 إلى 0 من 0",
            paginate: { first:"الأولى", last:"الأخيرة", next:"التالي", previous:"السابق" },
            buttons: {
                colvis: 'تحديد الحقول',
                print: 'طباعه',
                excel: 'تصدير اكسل'
            }
        }
    });
    
    // Move buttons to filter section
    dt.buttons().container().appendTo('#datatables-buttons-container');
    
    // Hide the default buttons container since we're using custom buttons
    $('.dt-buttons').hide();
    
    // Reinitialize buttons when filter section is shown
    $('#toggleFilters').on('click', function() {
        setTimeout(function() {
            // Refresh button styles when filter section is toggled
            $('.dt-buttons .btn').addClass('btn-sm');
        }, 100);
    });
    
    // Ensure buttons are properly styled after initialization
    setTimeout(function() {
        $('.dt-buttons .btn').addClass('btn-sm');
    }, 500);
    
    // Handle filter toggle button
    $('#toggleFilters').on('click', function() {
        var filterSection = $('#filterSection');
        var icon = $(this).find('i');
        var textSpan = $('#toggleFiltersText');
        
        if (filterSection.is(':visible')) {
            // Hide the filter section
            filterSection.hide();
            icon.removeClass('ti-filter-off').addClass('ti-filter');
            textSpan.text('إظهار الفلترة');
        } else {
            // Show the filter section
            filterSection.show();
            icon.removeClass('ti-filter').addClass('ti-filter-off');
            textSpan.text('إخفاء الفلترة');
        }
    });
    
    // Initialize bootstrap-select for category selection with enhanced options
    function initializeSelectPicker() {
        $('.selectpicker').selectpicker({
            style: 'btn-light',
            liveSearch: true,
            liveSearchPlaceholder: 'ابحث...',
            noneSelectedText: 'لم يتم تحديد أي شيء',
            noneResultsText: 'لا توجد نتائج لـ {0}',
            selectAllText: 'تحديد الكل',
            deselectAllText: 'إلغاء تحديد الكل',
            dropupAuto: false,   // منع السلوك التلقائي
            width: '100%',
            container: 'body'    // إخراج القائمة خارج أي كارد/مودال
        });
    }
    
    // Initialize selectpickers when document is ready
    initializeSelectPicker();
    
    // Re-initialize bootstrap-select when modals are shown or hidden
    $('.modal').on('shown.bs.modal hidden.bs.modal', function () {
        $('.selectpicker').selectpicker('refresh');
    });

    // Handle reset filters button
    $('#resetFilters').on('click', function() {
        // Reset all filter input fields
        $('#filter-id').val('');
        $('#filter-package-name').val('');
        $('#filter-package-price').val('');
        $('#filter-year').selectpicker('val', '');
        $('#filter-records').selectpicker('val', '');
        $('.selectpicker').selectpicker('refresh');
        alert('تم إعادة تعيين الفلاتر');
    });
    
    // Handle set price button functionality
    $(document).on('click', '[id$="-set-price-btn"]', function() {
        var prefix = $(this).attr('id').replace('-set-price-btn', '');
        var priceValue = $('#' + prefix + '-set-price-input').val();
        
        if (priceValue && !isNaN(priceValue)) {
            // Set the unit price for all packages
            $('#' + prefix + '-unit-price').val(priceValue);
            
            // Show success message
            alert('تم ضبط السعر لجميع الباقات والشحن الفوري');
        } else {
            alert('الرجاء إدخال سعر صحيح');
        }
    });
    
    // Handle row selection
    $('#categoriesTable tbody').on('click', 'tr', function(e) {
        // Prevent row selection when clicking on action buttons or dropdowns
        if ($(e.target).closest('.dropdown-toggle, .dropdown-menu, .btn').length) {
            return;
        }
        
        // Toggle selection
        if ($(this).hasClass('selected')) {
            $(this).removeClass('selected');
            selectedRow = null;
        } else {
            // Remove selection from other rows
            $('#categoriesTable tbody tr.selected').removeClass('selected');
            $(this).addClass('selected');
            selectedRow = $(this);
        }
        
        // Enable/disable top action buttons based on selection
        if (selectedRow) {
            $('#topEditButton, #topViewButton').removeClass('disabled');
        } else {
            $('#topEditButton, #topViewButton').addClass('disabled');
        }
    });
    
    // Handle select all checkbox
    $('#selectAll').on('change', function() {
        const isChecked = $(this).is(':checked');
        $('.category-checkbox').prop('checked', isChecked);
        
        // If all rows are selected, enable top action buttons
        if (isChecked) {
            $('#topEditButton, #topViewButton').removeClass('disabled');
        } else {
            $('#topEditButton, #topViewButton').addClass('disabled');
            selectedRow = null;
        }
    });
    
    // Handle individual checkbox selection
    $('#categoriesTable tbody').on('change', '.category-checkbox', function() {
        // If any checkbox is checked, enable top action buttons
        if ($('.category-checkbox:checked').length > 0) {
            $('#topEditButton, #topViewButton').removeClass('disabled');
        } else {
            $('#topEditButton, #topViewButton').addClass('disabled');
            selectedRow = null;
        }
    });
    
    // Handle top action buttons
    $('#topEditButton').on('click', function(e) {
        e.preventDefault();
        if (selectedRow) {
            editCategory(selectedRow);
        } else {
            alert('الرجاء تحديد صف أولاً');
        }
    });
    
    $('#topViewButton').on('click', function(e) {
        e.preventDefault();
        if (selectedRow) {
            viewCategory(selectedRow);
        } else {
            alert('الرجاء تحديد صف أولاً');
        }
    });
    
    // Handle action buttons in the table
    $('#categoriesTable').on('click', '[data-action]', function (e) {
        e.preventDefault(); // Prevent default action
        const action = $(this).data('action');
        const row = $(this).closest('tr');
        
        switch (action) {
            case 'view':
                viewCategory(row);
                break;
            case 'edit':
                editCategory(row);
                break;
        }
    });
    
    // Function to view category
    function viewCategory(row) {
        // In a real application, you would fetch the data from the server
        // For now, we'll just show the modal
        console.log('Showing view modal');
        $('#viewCategoryModal').modal('show');
    }
    
    // Function to edit category
    function editCategory(row) {
        // In a real application, you would populate the form with data from the server
        // For now, we'll just show the modal
        console.log('Showing edit modal');
        $('#editCategoryModal').modal('show');
    }
    
    // Handle form submissions with AJAX
    $('#addCategoryForm, #editCategoryForm').on('submit', function (e) {
        e.preventDefault();
        
        const form = $(this);
        const formId = form.attr('id');
        const prefix = formId === 'addCategoryForm' ? 'add' : 'edit';
        
        // Get form data
        const formData = getFormData(prefix);
        
        // Validate form
        if (!validateForm(formData, prefix)) {
            return;
        }
        
        // Submit form via AJAX
        submitFormViaAjax(formData, prefix);
    });
    
    // Handle save button click in modal footer
    $('#addCategoryModal .modal-footer .btn-primary, #editCategoryModal .modal-footer .btn-primary').on('click', function () {
        const modal = $(this).closest('.modal');
        const form = modal.find('form');
        const formId = form.attr('id');
        const prefix = formId === 'addCategoryForm' ? 'add' : 'edit';
        
        // Get form data
        const formData = getFormData(prefix);
        
        // Validate form
        if (!validateForm(formData, prefix)) {
            return;
        }
        
        // Submit form via AJAX
        submitFormViaAjax(formData, prefix);
    });
    
    // Function to get form data
    function getFormData(prefix) {
        const data = {
            packageName: $(`#${prefix}-package-name`).val(),
            providerBinding6: $(`#${prefix}-provider-binding-6`).val(),
            price: $(`#${prefix}-package-price`).val(),
            quantity: $(`#${prefix}-quantity`).val(),
            unitPrice: $(`#${prefix}-unit-price`).val()
        };
        
        return data;
    }
    
    // Function to validate form
    function validateForm(data, prefix) {
        let isValid = true;
        
        // Clear previous validation states
        $('.is-invalid').removeClass('is-invalid');
        $('.invalid-feedback').remove();
        
        // Validate required fields
        if (!data.packageName) {
            $(`#${prefix}-package-name`).addClass('is-invalid');
            $(`#${prefix}-package-name`).after('<div class="invalid-feedback">الرجاء إدخال اسم الفئة</div>');
            isValid = false;
        }
        
        if (!data.providerBinding6) {
            $(`#${prefix}-provider-binding-6`).addClass('is-invalid');
            $(`#${prefix}-provider-binding-6`).after('<div class="invalid-feedback">الرجاء إدخال رقم الربط</div>');
            isValid = false;
        }
        
        if (!data.price) {
            $(`#${prefix}-package-price`).addClass('is-invalid');
            $(`#${prefix}-package-price`).after('<div class="invalid-feedback">الرجاء إدخال السعر</div>');
            isValid = false;
        }
        
        if (!data.quantity) {
            $(`#${prefix}-quantity`).addClass('is-invalid');
            $(`#${prefix}-quantity`).after('<div class="invalid-feedback">الرجاء إدخال الكمية</div>');
            isValid = false;
        }
        
        if (!data.unitPrice) {
            $(`#${prefix}-unit-price`).addClass('is-invalid');
            $(`#${prefix}-unit-price`).after('<div class="invalid-feedback">الرجاء إدخال سعر الوحدة</div>');
            isValid = false;
        }
        
        return isValid;
    }
    
    // Function to submit form via AJAX
    function submitFormViaAjax(data, prefix) {
        // Show loading indicator
        const submitBtn = $(`#${prefix}CategoryModal .modal-footer .btn-primary`);
        const originalText = submitBtn.html();
        submitBtn.html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> جاري الحفظ...');
        submitBtn.prop('disabled', true);
        
        // In a real application, you would send the data to the server
        // For now, we'll simulate an AJAX call
        setTimeout(function () {
            // Reset button
            submitBtn.html(originalText);
            submitBtn.prop('disabled', false);
            
            // Close modal
            $(`#${prefix}CategoryModal`).modal('hide');
            
            // Show success message
            alert('تم حفظ البيانات بنجاح');
            
            // Reload the DataTable
            dt.ajax.reload();
        }, 1500);
    }
});
// Branches page specific JavaScript functionality
$(function () {
    // Initialize any branch-specific functionality here
    
    // Example: Branch tree initialization if needed
    // $('#branch-tree').jstree({
    //     core: {
    //         themes: {responsive: false},
    //         data: [] // Branch data would be loaded here
    //     },
    //     plugins: ["types"],
    //     types: {
    //         default: {icon: "ti ti-building fs-lg text-primary"},
    //         file: {icon: "ti ti-file-text fs-lg text-primary"}
    //     }
    // });
    
    console.log("Branches page JavaScript loaded");
});
/**
 * Template Name: INSPINIA - Multipurpose Admin & Dashboard Template
 * By (Author): WebAppLayers
 * Module/App (File Name): Config
 * Version: 4.2.0
 */

(function () {
    const html = document.documentElement;
    const storageKey = "__INSPINIA_CONFIG__";
    const savedConfig = sessionStorage.getItem(storageKey);

    // Default config
    const defaultConfig = {
        skin: "classic",
        theme: "system",
        layout: {
            position: "fixed",
        },
        topbar: {
            color: "light",
        },
        menu: {
            color: "dark",
        },
        sidenav: {
            size: "default",
            user: true,
        },
    };

    function getSystemTheme() {
        return window.matchMedia('(prefers-color-scheme: dark)').matches ? "dark" : "light";
    }

    // Build config from HTML attributes
    const htmlConfig = {
        skin: html.getAttribute("data-skin") || defaultConfig.skin,
        theme: html.getAttribute("data-bs-theme") === 'system'
            ? getSystemTheme()
            : html.getAttribute("data-bs-theme") || (defaultConfig.theme === 'system' ? getSystemTheme() : defaultConfig.theme),
        layout: {
            position: html.getAttribute("data-layout-position") || defaultConfig.layout.position,
        },
        topbar: {
            color: html.getAttribute("data-topbar-color") || defaultConfig.topbar.color,
        },
        menu: {
            color: html.getAttribute("data-menu-color") || defaultConfig.menu.color,
        },
        sidenav: {
            size: html.getAttribute("data-sidenav-size") || defaultConfig.sidenav.size,
            user: html.hasAttribute("data-sidenav-user") || defaultConfig.sidenav.user,
        },
    };

    // Save merged config as defaults globally
    window.defaultConfig = structuredClone(htmlConfig);

    // Load from session if exists
    let config = savedConfig ? JSON.parse(savedConfig) : htmlConfig;
    window.config = config;




    // Apply layout attributes immediately
    html.setAttribute("data-skin", config.skin);
    html.setAttribute("data-bs-theme", config.theme === 'system' ? getSystemTheme() : config.theme);
    html.setAttribute("data-menu-color", config.menu.color);
    html.setAttribute("data-topbar-color", config.topbar.color);
    html.setAttribute("data-layout-position", config.layout.position);

    if (config.sidenav.size) {
        let size = config.sidenav.size;

        if (window.innerWidth <= 767) {
            size = "offcanvas";
        } else if (window.innerWidth <= 1140 && !["offcanvas"].includes(size)) {
            size = "condensed";
        }

        html.setAttribute("data-sidenav-size", size);

        if (config.sidenav.user === true) {
            html.setAttribute("data-sidenav-user", "true");
        } else {
            html.removeAttribute("data-sidenav-user");
        }
    }
})();

// Financial Voucher Pages Filters Functionality
$(document).ready(function() {
    // Initialize DataTable for the balance deduction voucher table (matching Deduction Voucher page)
    var deductionTable;
    if (!$.fn.DataTable.isDataTable('#myTable')) {
        deductionTable = $('#myTable').DataTable({
            responsive: true,
            paging: true,
            searching: true,
            info: true,
            pageLength: 10,
            lengthMenu: [5, 10, 25, 50],
            language: {
                url: "https://cdn.datatables.net/plug-ins/1.13.8/i18n/ar.json"
            },
            columnDefs: [
                { orderable: false, targets: [0, -1] } // Disable sorting on checkbox and actions columns
            ],
            order: [[1, 'asc']], // Sort by ID column by default (second column, index 1)
            dom: '<"top"f>rt<"bottom"lip><"clear">' // Same DOM structure as Customer Journal
        });
    } else {
        deductionTable = $('#myTable').DataTable();
    }
    
    // Initialize DataTable for the customers table (matching Customer Journal page)
    var customersTable;
    if (!$.fn.DataTable.isDataTable('#customers-table')) {
        customersTable = $('#customers-table').DataTable({
            responsive: true,
            paging: true,
            searching: true,
            info: true,
            pageLength: 10,
            lengthMenu: [5, 10, 25, 50],
            language: {
                url: "https://cdn.datatables.net/plug-ins/1.13.8/i18n/ar.json"
            },
            columnDefs: [
                { orderable: false, targets: [0, 11] } // Disable sorting on checkbox and actions columns
            ],
            order: [[1, 'asc']], // Sort by ID column by default
            dom: '<"top"f>rt<"bottom"lip><"clear">' // Same DOM structure as Deduction Voucher
        });
    } else {
        customersTable = $('#customers-table').DataTable();
    }
    
    // Initialize DataTable for Pricing Groups table
    var pricingGroupsTable;
    if ($('#categoriesTable').length > 0 && !$.fn.DataTable.isDataTable('#categoriesTable')) {
        pricingGroupsTable = $('#categoriesTable').DataTable({
            responsive: true,
            paging: true,
            searching: true,
            info: true,
            pageLength: 10,
            lengthMenu: [5, 10, 25, 50],
            language: {
                url: "https://cdn.datatables.net/plug-ins/1.13.8/i18n/ar.json"
            },
            columnDefs: [
                { orderable: false, targets: [0, -1] } // Disable sorting on checkbox and actions columns
            ],
            order: [[1, 'asc']], // Sort by ID column by default
            dom: '<"top"f>rt<"bottom"lip><"clear">'
        });
    } else if ($('#categoriesTable').length > 0) {
        pricingGroupsTable = $('#categoriesTable').DataTable();
    }

    // Function to initialize Select2 with common options
    function initSelect2(selector, placeholder) {
        $(selector).select2({
            dir: "rtl",
            width: "100%",
            placeholder: placeholder,
            allowClear: true,
            language: {
                noResults: function () {
                    return "لا توجد نتائج";
                }
            }
        });
    }

    // Function to initialize Select2 with AJAX for large datasets
    function initSelect2Ajax(selector, placeholder, apiUrl) {
        $(selector).select2({
            dir: "rtl",
            width: "100%",
            placeholder: placeholder,
            allowClear: true,
            minimumInputLength: 2,
            ajax: {
                url: apiUrl,
                dataType: 'json',
                delay: 250,
                data: function (params) {
                    return {
                        q: params.term, // search term
                        page: params.page || 1
                    };
                },
                processResults: function (data, params) {
                    params.page = params.page || 1;
                    
                    return {
                        results: data.results,
                        pagination: {
                            more: (params.page * 10) < data.total_count
                        }
                    };
                },
                cache: true
            },
            language: {
                noResults: function () {
                    return "لا توجد نتائج";
                },
                searching: function() {
                    return "جاري البحث...";
                },
                inputTooShort: function() {
                    return "الرجاء إدخال حرفين أو أكثر للبحث";
                }
            }
        });
    }

    // Initialize Select2 for all select elements on Customer Journal page
    if ($('#customers-table').length > 0) {
        // For smaller datasets, use static options
        initSelect2('#filter-accounting-sources', "اختر مصدر حساب...");
        initSelect2('#filter-all-employees', "اختر موظف...");
        initSelect2('#filter-currencies', "اختر عملة...");
        initSelect2('#filter-all-groups', "اختر مجموعة...");
        initSelect2('#filter-customer-type', "اختر نوع عميل...");
        
        // For larger datasets like customers, use AJAX
        // initSelect2Ajax('#filter-customers', "ابحث عن عميل...", '/api/customers/search');
        
        // For now, using static options for customers as well
        initSelect2('#filter-customers', "ابحث عن عميل...");
    }

    // Handle filter toggle button
    $('#toggleFilters').on('click', function () {
        var filterSection = $('#filterSection');
        var icon = $(this).find('i');
        var textSpan = $('#toggleFiltersText');

        if (filterSection.is(':visible')) {
            // Hide the filter section with slide animation
            filterSection.slideUp();
            icon.removeClass('ti-filter-off').addClass('ti-filter');
            textSpan.text('إظهار الفلترة');
        } else {
            // Show the filter section with slide animation
            filterSection.slideDown();
            icon.removeClass('ti-filter').addClass('ti-filter-off');
            textSpan.text('إخفاء الفلترة');
        }
    });

    // Handle apply filters button
    $('#applyFilters').on('click', function () {
        // Check which page we're on and apply filters to the appropriate table
        if ($('#customers-table').length > 0 && typeof customersTable !== 'undefined') {
            // Customer Journal page - apply filters directly to DataTable
            let customer = $('#filter-customers option:selected').text();
            let statement = $('#filter-statement').val();
            let dateFrom = $('#filter-date-from').val();
            let dateTo = $('#filter-date-to').val();
            let accountingSource = $('#filter-accounting-sources').val();
            let employee = $('#filter-all-employees').val();
            let currency = $('#filter-currencies').val();
            let group = $('#filter-all-groups').val();
            let customerType = $('#filter-customer-type').val();
            let year = $('#filter-year').val();
            let period = $('#filter-period').val();
            
            // Clear any existing custom search functions
            $.fn.dataTable.ext.search = [];
            
            // Apply filters to specific columns
            // Column index: 0=checkbox, 1=id, 2=account, 3=customer, 4=credit, 5=debit, 6=difference, 7=date, 8=employee, 9=source, 10=currency, 11=actions
            customersTable.column(3).search(customer && customer !== "كل العملاء" ? customer : ''); // Customer column
            customersTable.column(6).search(statement ? statement : ''); // Statement/description column
            
            // Employee filter
            customersTable.column(8).search(employee && employee !== "" ? employee : '');
            
            // Accounting source filter
            customersTable.column(9).search(accountingSource && accountingSource !== "" ? accountingSource : '');
            
            // Currency filter
            customersTable.column(10).search(currency && currency !== "" ? currency : '');
            
            // Date range filtering using custom search function
            if (dateFrom || dateTo) {
                $.fn.dataTable.ext.search.push(function(settings, data, dataIndex) {
                    let date = data[7]; // Date column (index 7)
                    if (!date) return true;
                    
                    // Convert date strings to Date objects for comparison
                    let dateValue = new Date(date);
                    let fromDate = dateFrom ? new Date(dateFrom) : null;
                    let toDate = dateTo ? new Date(dateTo) : null;
                    
                    if (fromDate && dateValue < fromDate) return false;
                    if (toDate && dateValue > toDate) return false;
                    return true;
                });
            }
            
            customersTable.draw();
        } else if ($('#myTable').length > 0 && typeof deductionTable !== 'undefined') {
            // Account Transfers page - apply filters directly to DataTable
            // Note: The actual Account Transfers table has 11 columns:
            // 0=Checkbox, 1=ID, 2=From Account, 3=To Account, 4=Amount, 5=Currency, 6=Statement, 7=Date, 8=Add Date, 9=Employee ID, 10=Actions
            
            // Get filter values
            let id = $('#filter-id').val();
            let fromAccount = $('#filter-from-account').val();
            let toAccount = $('#filter-to-account').val();
            let amount = $('#filter-amount').val();
            let currency = $('#filter-currency').val();
            let statement = $('#filter-statement').val();
            let dateFrom = $('#filter-date-from').val();
            let dateTo = $('#filter-date-to').val();
            let employeeId = $('#filter-employee').val();
            
            // Clear any existing custom search functions
            $.fn.dataTable.ext.search = [];
            
            // Apply filters to specific columns
            deductionTable.column(1).search(id ? id : ''); // ID column
            deductionTable.column(2).search(fromAccount ? fromAccount : ''); // From Account column
            deductionTable.column(3).search(toAccount ? toAccount : ''); // To Account column
            deductionTable.column(4).search(amount ? amount : ''); // Amount column
            deductionTable.column(5).search(currency ? currency : ''); // Currency column
            deductionTable.column(6).search(statement ? statement : ''); // Statement column
            
            // Employee ID filter
            deductionTable.column(9).search(employeeId ? employeeId : ''); // Employee ID column
            
            // Date range filtering using custom search function
            if (dateFrom || dateTo) {
                $.fn.dataTable.ext.search.push(function(settings, data, dataIndex) {
                    let dateValue = data[7]; // Date column (index 7)
                    if (!dateValue) return true;
                    
                    // Convert date strings to Date objects for comparison
                    let dateVal = new Date(dateValue);
                    let fromDate = dateFrom ? new Date(dateFrom) : null;
                    let toDate = dateTo ? new Date(dateTo) : null;
                    
                    if (fromDate && dateVal < fromDate) return false;
                    if (toDate && dateVal > toDate) return false;
                    return true;
                });
            }
            
            deductionTable.draw();
        } else if ($('#categoriesTable').length > 0 && typeof pricingGroupsTable !== 'undefined') {
            // Pricing Groups page - apply filters directly to DataTable
            // Get filter values
            let id = $('#filter-id').val();
            let groupName = $('#filter-group-name').val();
            let mobile = $('#filter-mobile').val();
            let you = $('#filter-you').val();
            let youPackages = $('#filter-you-packages').val();
            let safafon = $('#filter-safafon').val();
            let wifi = $('#filter-wifi').val();
            let mobileWholesale = $('#filter-mobile-wholesale').val();
            let youWholesale = $('#filter-you-wholesale').val();
            let safafonWholesale = $('#filter-safafon-wholesale').val();
            let internet = $('#filter-internet').val();
            let landline = $('#filter-landline').val();
            let mobileRecharge = $('#filter-mobile-recharge').val();
            let moneyTransfer = $('#filter-money-transfer').val();
            
            // Clear any existing custom search functions
            $.fn.dataTable.ext.search = [];
            
            // Apply filters to specific columns
            pricingGroupsTable.column(1).search(id ? id : ''); // ID column
            pricingGroupsTable.column(2).search(groupName ? groupName : ''); // Group Name column
            pricingGroupsTable.column(3).search(mobile ? mobile : ''); // Mobile column
            pricingGroupsTable.column(4).search(you ? you : ''); // YOU column
            pricingGroupsTable.column(5).search(youPackages ? youPackages : ''); // YOU Packages column
            pricingGroupsTable.column(6).search(safafon ? safafon : ''); // Safafon column
            pricingGroupsTable.column(7).search(wifi ? wifi : ''); // WiFi column
            pricingGroupsTable.column(8).search(mobileWholesale ? mobileWholesale : ''); // Mobile Wholesale column
            pricingGroupsTable.column(9).search(youWholesale ? youWholesale : ''); // YOU Wholesale column
            pricingGroupsTable.column(10).search(safafonWholesale ? safafonWholesale : ''); // Safafon Wholesale column
            pricingGroupsTable.column(11).search(internet ? internet : ''); // Internet column
            pricingGroupsTable.column(12).search(landline ? landline : ''); // Landline column
            pricingGroupsTable.column(13).search(mobileRecharge ? mobileRecharge : ''); // Mobile Recharge column
            pricingGroupsTable.column(14).search(moneyTransfer ? moneyTransfer : ''); // Money Transfer column
            
            pricingGroupsTable.draw();
        }
    });

    // Handle reset filters button
    $('#resetFilters').on('click', function () {
        // Check which page we're on and reset appropriate filters
        if ($('#customers-table').length > 0) {
            // Customer Journal page - reset all filter input fields
            $('#filtersForm')[0].reset();
            $('.select2').val(null).trigger('change'); 
            if (typeof customersTable !== 'undefined') {
                // Clear custom search functions
                $.fn.dataTable.ext.search = [];
                customersTable.search('').columns().search('').draw();
            }
        } else if ($('#myTable').length > 0) {
            // Account Transfers page - reset all filter input fields
            $('#filter-id').val('');
            $('#filter-from-account').val('');
            $('#filter-to-account').val('');
            $('#filter-amount').val('');
            $('#filter-currency').val('');
            $('#filter-statement').val('');
            $('#filter-date-from').val('');
            $('#filter-date-to').val('');
            $('#filter-employee').val('');
            if (typeof deductionTable !== 'undefined') {
                // Clear custom search functions
                $.fn.dataTable.ext.search = [];
                deductionTable.search('').columns().search('').draw();
            }
        } else if ($('#categoriesTable').length > 0) {
            // Pricing Groups page - reset all filter input fields
            $('#filter-id').val('');
            $('#filter-group-name').val('');
            $('#filter-mobile').val('');
            $('#filter-you').val('');
            $('#filter-you-packages').val('');
            $('#filter-safafon').val('');
            $('#filter-wifi').val('');
            $('#filter-mobile-wholesale').val('');
            $('#filter-you-wholesale').val('');
            $('#filter-safafon-wholesale').val('');
            $('#filter-internet').val('');
            $('#filter-landline').val('');
            $('#filter-mobile-recharge').val('');
            $('#filter-money-transfer').val('');
            if (typeof pricingGroupsTable !== 'undefined') {
                // Clear custom search functions
                $.fn.dataTable.ext.search = [];
                pricingGroupsTable.search('').columns().search('').draw();
            }
        }
        
        alert('تم إعادة تعيين الفلاتر');
    });

    // Handle refresh button
    $('#refreshBtn').on('click', function () {
        alert('سيتم تحديث بيانات الجدول');
        // Reload the appropriate DataTable
        if ($('#customers-table').length > 0 && typeof customersTable !== 'undefined') {
            customersTable.draw();
        } else if ($('#myTable').length > 0 && typeof deductionTable !== 'undefined') {
            deductionTable.draw();
        } else if ($('#categoriesTable').length > 0 && typeof pricingGroupsTable !== 'undefined') {
            pricingGroupsTable.draw();
        }
    });
    
    // Handle auto refresh button
    $('#autoRefresh').on('click', function () {
        alert('سيتم تجديد الجدول تلقائياً 🔄');
        // In a real application, you would implement auto-refresh functionality here
    });
    
    // Handle follow up button
    $('#followUp').on('click', function () {
        alert('فتح نافذة المتابعة 👀');
        // In a real application, you would open a follow-up modal or page here
    });
    
    // Handle export all button
    $('#exportAll').on('click', function () {
        alert('تصدير البيانات 📤');
        // In a real application, you would implement export functionality here
    });
    
    // Handle select all columns button
    $('#selectAllColumns').on('click', function () {
        alert('تحديد جميع الأعمدة');
        // In a real application, you would implement column selection functionality here
    });
});
/**
 * Header Dropdowns Initialization
 * Fixes issues with notification and message dropdowns not working
 */

// Initialize header dropdowns when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    // Use a small delay to ensure all elements are loaded
    setTimeout(initHeaderDropdowns, 100);
});

// Also initialize when the page is loaded (fallback)
window.addEventListener('load', function() {
    initHeaderDropdowns();
});

function initHeaderDropdowns() {
    try {
        // Handle notification dropdown (first .topbar-item with .dropdown-toggle)
        const topbarItems = document.querySelectorAll('.topbar-item');
        if (topbarItems.length > 0) {
            const notificationDropdown = topbarItems[0].querySelector('.dropdown-toggle');
            if (notificationDropdown) {
                initializeDropdown(notificationDropdown);
            }
        }
        
        // Handle message dropdown (second .topbar-item with .dropdown-toggle)
        if (topbarItems.length > 1) {
            const messageDropdown = topbarItems[1].querySelector('.dropdown-toggle');
            if (messageDropdown) {
                initializeDropdown(messageDropdown);
            }
        }
        
        // Handle user profile dropdown (.nav-user .dropdown-toggle)
        const userProfileToggle = document.querySelector('.nav-user .dropdown-toggle');
        if (userProfileToggle) {
            initializeDropdown(userProfileToggle);
        }
    } catch (error) {
        console.error('Error initializing header dropdowns:', error);
    }
}

function initializeDropdown(toggleElement) {
    try {
        // Remove any existing Bootstrap dropdown instance
        const existingInstance = bootstrap.Dropdown.getInstance(toggleElement);
        if (existingInstance) {
            existingInstance.dispose();
        }
        
        // Add click event listener
        // Remove any existing listeners first
        toggleElement.removeEventListener('click', handleDropdownClick);
        toggleElement.addEventListener('click', handleDropdownClick);
        
        // Also ensure Bootstrap dropdown is initialized
        if (!bootstrap.Dropdown.getInstance(toggleElement)) {
            new bootstrap.Dropdown(toggleElement);
        }
    } catch (error) {
        console.error('Error initializing dropdown:', error);
    }
}

function handleDropdownClick(e) {
    e.preventDefault();
    e.stopPropagation();
    
    try {
        // Get or create dropdown instance
        let dropdownInstance = bootstrap.Dropdown.getInstance(this);
        if (!dropdownInstance) {
            dropdownInstance = new bootstrap.Dropdown(this);
        }
        dropdownInstance.toggle();
    } catch (error) {
        console.error('Error toggling dropdown:', error);
    }
}
$(document).ready(function () {
    // Handle filter toggle button - Use event delegation to ensure our handler runs
    $(document).off('click', '#toggleFilters').on('click', '#toggleFilters', function(e) {
        e.preventDefault();
        e.stopImmediatePropagation(); // Prevent other handlers from running
        console.log('Network Cards Filter toggle button clicked');
        
        var filterSection = $('#filterSection');
        var icon = $(this).find('i');
        var textSpan = $('#toggleFiltersText');
        
        console.log('Filter section is visible:', filterSection.is(':visible'));
        
        if (filterSection.is(':visible')) {
            // Hide the filter section
            filterSection.hide();
            icon.removeClass('ti-filter-off').addClass('ti-filter');
            textSpan.text('إظهار الفلترة');
            console.log('Hiding filter section');
        } else {
            // Show the filter section
            filterSection.show();
            icon.removeClass('ti-filter').addClass('ti-filter-off');
            textSpan.text('إخفاء الفلترة');
            console.log('Showing filter section');
        }
    });
    
    // Log when document is ready
    console.log('Network Cards document ready');
    
    // Initialize DataTable with client-side processing (static data)
    var networkCardsTable = $('#categoriesTable').DataTable({
        "processing": true,
        "serverSide": false, // Changed to client-side processing
        "data": [ // Static data
            [1, "1234567890", "77", "فئة 1 - 100 ريال", "2023-10-01", "إبتاع"],
            [2, "1234567891", "73", "فئة 2 - 200 ريال", "2023-10-02", "غير مباع"],
            [3, "1234567892", "71", "فئة 3 - 300 ريال", "2023-10-03", "إبتاع"]
        ],
        "columns": [
            { 
                "data": null, 
                "orderable": false, 
                "render": function (data, type, row) {
                    return '<input type="checkbox" class="row-checkbox" data-id="' + row[0] + '">';
                }
            },
            { "data": 0 }, // الرقم (Number)
            { "data": 1 }, // رقم الكرت (Card Number)
            { "data": 2 }, // رقم الشبكة (Network Number)
            { "data": 3 }, // الفئة والسعر (Category and Price)
            { "data": 4 }, // تاريخ الاضافة (Date Added)
            { "data": 5 }, // الحالة (Status)
            { 
                "data": null, 
                "orderable": false, 
                "render": function (data, type, row) {
                    return '<div class="dropdown">' +
                        '<button class="btn btn-sm btn-outline-primary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">' +
                        'للمزيد' +
                        '</button>' +
                        '<ul class="dropdown-menu dropdown-menu-end">' +
                        '<li><a class="dropdown-item" href="#" data-action="edit"><i class="ti ti-pencil me-1"></i> تعديل</a></li>' +
                        '<li><a class="dropdown-item" href="#" data-action="view"><i class="ti ti-eye me-1"></i> مشاهدة</a></li>' +
                        '<li><a class="dropdown-item" href="#"><i class="ti ti-trash me-1"></i> حذف</a></li>' +
                        '</ul>' +
                        '</div>';
                }
            }
        ],
        "language": {
            "url": "https://cdn.datatables.net/plug-ins/1.13.8/i18n/ar.json"
        },
        "order": [[1, "asc"]],
        "pageLength": 30,
        "responsive": true,
        "dom": '<"row"<"col-sm-12 col-md-6"l><"col-sm-12 col-md-6"f>>' +
               '<"row"<"col-sm-12"tr>>' +
               '<"row"<"col-sm-12 col-md-5"i><"col-sm-12 col-md-7"p>>'
    });
    
    // Initialize bootstrap-select for dropdowns
    function initializeSelectPicker() {
        $('.selectpicker').selectpicker({
            style: 'btn-light',
            liveSearch: true,
            liveSearchPlaceholder: 'ابحث...',
            noneSelectedText: 'لم يتم تحديد أي شيء',
            noneResultsText: 'لا توجد نتائج لـ {0}',
            selectAllText: 'تحديد الكل',
            deselectAllText: 'إلغاء تحديد الكل',
            dropupAuto: false,
            width: '100%',
            container: 'body'
        });
    }
    
    // Initialize selectpickers when document is ready
    setTimeout(function() {
        initializeSelectPicker();
    }, 100);
    
    // Re-initialize bootstrap-select when modals are shown
    $('.modal').on('shown.bs.modal', function () {
        $('.selectpicker').selectpicker('refresh');
    });
    
    // Initialize top action buttons as disabled
    $('#topEditButton, #topViewButton').addClass('disabled');
    
    // Handle form submissions with AJAX
    $('#addCategoryForm, #editCategoryForm').on('submit', function (e) {
        e.preventDefault();
        
        const form = $(this);
        const formId = form.attr('id');
        const prefix = formId === 'addCategoryForm' ? 'add' : 'edit';
        
        // Get form data
        const formData = getFormData(prefix);
        
        // Validate form
        if (!validateForm(formData, prefix)) {
            return;
        }
        
        // Submit form via AJAX
        submitFormViaAjax(formData, prefix);
    });
    
    // Handle save button click in modal footer
    $('#addCategoryModal .modal-footer .btn-primary, #editCategoryModal .modal-footer .btn-primary').on('click', function () {
        const modal = $(this).closest('.modal');
        const form = modal.find('form');
        const formId = form.attr('id');
        const prefix = formId === 'addCategoryForm' ? 'add' : 'edit';
        
        // Get form data
        const formData = getFormData(prefix);
        
        // Validate form
        if (!validateForm(formData, prefix)) {
            return;
        }
        
        // Submit form via AJAX
        submitFormViaAjax(formData, prefix);
    });
    
    // Handle global percentage application
    $(document).on('click', '[id$="GlobalPercentage"]', function () {
        const buttonId = $(this).attr('id');
        const prefix = buttonId.replace('GlobalPercentage', '').toLowerCase();
        
        const globalPercentage = $(`#${prefix}-global-percentage`).val();
        
        if (!globalPercentage || globalPercentage < 0 || globalPercentage > 2) {
            alert('الرجاء إدخال نسبة صحيحة بين 0 و 2');
            return;
        }
        
        // Apply the percentage to all fields
        applyGlobalPercentage(globalPercentage, prefix);
    });
    
    // Handle edit from view button
    $('#editFromViewBtn').on('click', function () {
        // Close view modal
        $('#viewCategoryModal').modal('hide');
        
        // Open edit modal (in a real app, you would populate it with data first)
        $('#editCategoryModal').modal('show');
    });
    
    // Handle action buttons in the table
    $('#categoriesTable').on('click', '[data-action]', function (e) {
        e.preventDefault(); // Prevent default action
        const action = $(this).data('action');
        const row = $(this).closest('tr');
        
        switch (action) {
            case 'view':
                viewCategory(row);
                break;
            case 'edit':
                editCategory(row);
                break;
        }
    });
    
    // Function to get form data
    function getFormData(prefix) {
        const data = {
            networkExample: $(`#${prefix}-network-example`).val(),
            cardNumber: $(`#${prefix}-card-number`).val(),
            category: $(`#${prefix}-category`).val()
        };
        
        return data;
    }
    
    // Function to validate form
    function validateForm(data, prefix) {
        let isValid = true;
        
        // Clear previous validation states
        $('.is-invalid').removeClass('is-invalid');
        $('.invalid-feedback').remove();
        
        // Validate required fields
        if (!data.cardNumber) {
            $(`#${prefix}-card-number`).addClass('is-invalid');
            $(`#${prefix}-card-number`).after('<div class="invalid-feedback">الرجاء إدخال رقم الكرت</div>');
            isValid = false;
        }
        
        if (!data.category) {
            $(`#${prefix}-category`).addClass('is-invalid');
            $(`#${prefix}-category`).after('<div class="invalid-feedback">الرجاء إدخال الفئة</div>');
            isValid = false;
        }
        
        return isValid;
    }
    
    // Function to submit form via AJAX
    function submitFormViaAjax(data, prefix) {
        // Show loading indicator
        const submitBtn = $(`#${prefix}CategoryModal .modal-footer .btn-primary`);
        const originalText = submitBtn.html();
        submitBtn.html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> جاري الحفظ...');
        submitBtn.prop('disabled', true);
        
        // In a real application, you would send the data to the server
        // For now, we'll simulate an AJAX call
        setTimeout(function () {
            // Reset button
            submitBtn.html(originalText);
            submitBtn.prop('disabled', false);
            
            // Close modal
            $(`#${prefix}CategoryModal`).modal('hide');
            
            // Show success message
            alert('تم حفظ البيانات بنجاح');
            
            // Reload the DataTable
            networkCardsTable.ajax.reload();
        }, 1500);
    }
    
    // Function to apply global percentage
    function applyGlobalPercentage(percentage, prefix) {
        for (let i = 1; i <= 5; i++) {
            if ($(`#${prefix}-range${i}-ratio`).val() !== '') {
                $(`#${prefix}-range${i}-ratio`).val(percentage);
            }
        }
        
        alert(`تم تطبيق النسبة ${percentage} على جميع الحقول`);
    }
    
    // Function to view category
    function viewCategory(row) {
        // In a real application, you would fetch the data from the server
        // For now, we'll just show the modal
        console.log('Showing view modal');
        $('#viewCategoryModal').modal('show');
    }
    
    // Function to edit category
    function editCategory(row) {
        // In a real application, you would populate the form with data from the server
        // For now, we'll just show the modal
        console.log('Showing edit modal');
        $('#editCategoryModal').modal('show');
    }
    
    // Initialize tooltips
    $('[data-bs-toggle="tooltip"]').tooltip();
    
    // Handle select all columns button
    $('#selectAllColumns').on('click', function () {
        const allChecked = $('#selectAllCheckbox').prop('checked');
        $('.row-checkbox').prop('checked', !allChecked);
        $('#selectAllCheckbox').prop('checked', !allChecked);
        // Enable/disable top action buttons based on selection
        toggleTopActionButtons();
    });
    
    // Handle individual row checkbox changes
    $('#categoriesTable tbody').on('change', '.row-checkbox', function () {
        // Enable/disable top action buttons based on selection
        toggleTopActionButtons();
    });
    
    // Function to enable/disable top action buttons based on row selection
    function toggleTopActionButtons() {
        const selectedRows = $('.row-checkbox:checked').length;
        if (selectedRows === 1) {
            $('#topEditButton, #topViewButton').removeClass('disabled');
        } else if (selectedRows === 0) {
            $('#topEditButton, #topViewButton').addClass('disabled');
        } else {
            // Multiple rows selected - only allow view in this example
            $('#topEditButton').addClass('disabled');
            $('#topViewButton').removeClass('disabled');
        }
    }
    
    // Handle top edit button click
    $('#topEditButton').on('click', function (e) {
        e.preventDefault();
        const selectedRows = $('.row-checkbox:checked');
        if (selectedRows.length === 1) {
            // Get the row data
            const row = selectedRows.closest('tr');
            editCategory(row);
        } else {
            alert('الرجاء تحديد صف واحد للتعديل');
        }
    });
    
    // Handle top view button click
    $('#topViewButton').on('click', function (e) {
        e.preventDefault();
        const selectedRows = $('.row-checkbox:checked');
        if (selectedRows.length >= 1) {
            // Get the first selected row data
            const row = selectedRows.first().closest('tr');
            viewCategory(row);
        } else {
            alert('الرجاء تحديد صف واحد على الأقل للمشاهدة');
        }
    });
    
    // Handle print button
    $('#printButton').on('click', function () {
        window.print();
    });
    
    // Handle export to Excel button
    $('#exportExcelButton').on('click', function () {
        alert('تصدير إلى Excel');
        // In a real application, you would implement Excel export functionality here
    });
    
    // Handle filter application
    $('#applyFilters').on('click', function () {
        // Get filter values
        var filterCardNumber = $('#filter-card-number').val();
        var filterStatus = $('#status').val();
        var filterRecords = $('#rowsCount').val();

        // Apply filters to DataTable
        // Column index 2 is the card number column (accounting for checkbox column)
        networkCardsTable.column(2).search(filterCardNumber ? filterCardNumber : '').draw();
        // Column index 6 is the status column (accounting for checkbox column)
        networkCardsTable.column(6).search(filterStatus && filterStatus !== "الحالة" ? filterStatus : '').draw();
        
        // Set page length based on records filter
        if (filterRecords) {
            networkCardsTable.page.len(filterRecords).draw();
        }
    });
    
    // Handle reset filters button
    $('#resetFilters').on('click', function () {
        // Reset all filter input fields
        $('#filter-card-number').val('');
        $('#status').selectpicker('val', '');
        $('#rowsCount').selectpicker('val', '30');
        
        // Refresh the selectpickers to show the placeholders
        $('#status').selectpicker('refresh');
        $('#rowsCount').selectpicker('refresh');
        
        // Reset DataTable page length to default (30 as requested)
        networkCardsTable.page.len(30).draw();
        
        // Clear DataTable filters
        networkCardsTable.search('').columns().search('').draw();
        
        alert('تم إعادة تعيين الفلاتر');
    });
});
$(document).ready(function() {
    // تهيئة جدول البيانات
    $('#dataTable').DataTable({
        responsive: true,
        dom: 'Bfrtip',
        buttons: [
            'copy', 'excel', 'pdf', 'print'
        ],
        language: {
            "sProcessing": "جارٍ التحميل...",
            "sLengthMenu": "أظهر _MENU_ مدخلات",
            "sZeroRecords": "لم يعثر على أية سجلات",
            "sInfo": "إظهار _START_ إلى _END_ من أصل _TOTAL_ مدخل",
            "sInfoEmpty": "يعرض 0 إلى 0 من أصل 0 سجل",
            "sInfoFiltered": "(منتقاة من مجموع _MAX_ مُدخل)",
            "sInfoPostFix": "",
            "sSearch": "ابحث:",
            "sUrl": "",
            "oPaginate": {
                "sFirst": "الأول",
                "sPrevious": "السابق",
                "sNext": "التالي",
                "sLast": "الأخير"
            }
        }
    });

    // تهيئة عناصر الاختيار
    $('.selectpicker').selectpicker();
});

// فتح النافذة المنبثقة
function openModal(modalId) {
    document.getElementById(modalId).style.display = 'block';
}

// إغلاق النافذة المنبثقة
function closeModal(modalId) {
    document.getElementById(modalId).style.display = 'none';
}

// تعديل عنصر
function editItem(id) {
    // الحصول على بيانات العنصر من الجدول
    const row = $(`#dataTable tr`).filter(function() {
        return $(this).find('td:first').text() == id;
    });

    if (row.length) {
        const cells = row.find('td');
        
        // تعبئة نموذج التعديل بالبيانات
        $('#editId').val(id);
        $('#editName').val(cells.eq(1).text());
        $('#editRatio').val(cells.eq(2).text());
        $('#editDescription').val(cells.eq(3).text());
        $('#editCustomerNumber').val(cells.eq(4).text());
        $('#editCustomerName').val(cells.eq(5).text());
        $('#editGroupNumber').val(cells.eq(6).text());
        $('#editGroupName').val(cells.eq(7).text());
        $('#editNetwork').val(cells.eq(8).text());
        $('#editProvider').val(cells.eq(9).text());
        $('#editIsActive').prop('checked', cells.eq(10).text().trim() === 'فعال');
        
        // فتح نافذة التعديل
        openModal('editModal');
    }
}

// حذف عنصر
function deleteItem(id) {
    $('#deleteId').val(id);
    openModal('deleteModal');
}

// إغلاق النوافذ عند النقر خارجها
window.onclick = function(event) {
    if (event.target.className === 'modal') {
        event.target.style.display = 'none';
    }
};

// التحقق من صحة النموذج قبل الإرسال
function validateForm(formId) {
    const form = document.getElementById(formId);
    if (!form.checkValidity()) {
        form.reportValidity();
        return false;
    }
    return true;
}

// تنسيق الأرقام والنسب
function formatNumber(input) {
    let value = input.value.replace(/[^\d.]/g, '');
    if (value !== '') {
        const num = parseFloat(value);
        if (!isNaN(num)) {
            if (input.classList.contains('percentage')) {
                input.value = Math.min(100, num).toFixed(2) + '%';
            } else {
                input.value = num.toLocaleString('ar-SA');
            }
        }
    }
}

// إعادة تعيين النموذج
function resetForm(formId) {
    document.getElementById(formId).reset();
}
$(document).ready(function () {
    // Initialize DataTable with basic configuration
    var pricingGroupsTable = $('#categoriesTable').DataTable();
    
    // Handle form submissions with AJAX
    $('#addCategoryForm, #editCategoryForm').on('submit', function (e) {
        e.preventDefault();
        
        const form = $(this);
        const formId = form.attr('id');
        const prefix = formId === 'addCategoryForm' ? 'add' : 'edit';
        
        // Get form data
        const formData = getFormData(prefix);
        
        // Validate form
        if (!validateForm(formData, prefix)) {
            return;
        }
        
        // Submit form via AJAX
        submitFormViaAjax(formData, prefix);
    });
    
    // Handle global percentage application
    $(document).on('click', '[id$="GlobalPercentage"]', function () {
        const buttonId = $(this).attr('id');
        const prefix = buttonId.replace('GlobalPercentage', '').toLowerCase();
        
        const globalPercentage = $(`#${prefix}-global-percentage`).val();
        
        if (!globalPercentage || globalPercentage < 0 || globalPercentage > 2) {
            alert('الرجاء إدخال نسبة صحيحة بين 0 و 2');
            return;
        }
        
        // Apply the percentage to all fields
        applyGlobalPercentage(globalPercentage, prefix);
    });
    
    // Handle edit from view button
    $('#editFromViewBtn').on('click', function () {
        // Close view modal
        $('#viewCategoryModal').modal('hide');
        
        // Open edit modal (in a real app, you would populate it with data first)
        $('#editCategoryModal').modal('show');
    });
    
    // Handle action buttons in the table
    $('#categoriesTable').on('click', '[data-action]', function () {
        const action = $(this).data('action');
        const row = $(this).closest('tr');
        
        switch (action) {
            case 'view':
                viewCategory(row);
                break;
            case 'edit':
                editCategory(row);
                break;
        }
    });
    
    // Function to get form data
    function getFormData(prefix) {
        const data = {
            groupName: $(`#${prefix}-group-name`).val(),
            groupType: $(`#${prefix}-group-type`).val(),
            sendNotification: $(`#${prefix}-send-notification`).is(':checked')
        };
        
        // Get all service values
        $(`#${prefix}CategoryTabContent input[type="number"]`).each(function () {
            const id = $(this).attr('id');
            const fieldName = id.replace(`${prefix}-`, '');
            data[fieldName] = $(this).val();
        });
        
        return data;
    }
    
    // Function to validate form
    function validateForm(data, prefix) {
        let isValid = true;
        
        // Clear previous validation states
        $(`#${prefix}CategoryTabContent .is-invalid`).removeClass('is-invalid');
        $(`#${prefix}CategoryTabContent .invalid-feedback`).remove();
        
        // Validate required fields
        if (!data.groupName) {
            $(`#${prefix}-group-name`).addClass('is-invalid');
            $(`#${prefix}-group-name`).after('<div class="invalid-feedback">الرجاء إدخال اسم المجموعة</div>');
            isValid = false;
        }
        
        if (!data.groupType) {
            $(`#${prefix}-group-type`).addClass('is-invalid');
            $(`#${prefix}-group-type`).after('<div class="invalid-feedback">الرجاء اختيار نوع المجموعة</div>');
            isValid = false;
        }
        
        // Validate numeric fields (between 0 and 2)
        for (const [key, value] of Object.entries(data)) {
            if (key !== 'groupName' && key !== 'groupType' && key !== 'sendNotification') {
                if (value && (value < 0 || value > 2)) {
                    const fieldId = `${prefix}-${key}`;
                    $(`#${fieldId}`).addClass('is-invalid');
                    $(`#${fieldId}`).after('<div class="invalid-feedback">الرجاء إدخال قيمة بين 0 و 2</div>');
                    isValid = false;
                }
            }
        }
        
        return isValid;
    }
    
    // Function to submit form via AJAX
    function submitFormViaAjax(data, prefix) {
        // Show loading indicator
        const submitBtn = $(`#${prefix}CategoryForm button[type="submit"]`);
        const originalText = submitBtn.html();
        submitBtn.html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> جاري الحفظ...');
        submitBtn.prop('disabled', true);
        
        // In a real application, you would send the data to the server
        // For now, we'll simulate an AJAX call
        setTimeout(function () {
            // Reset button
            submitBtn.html(originalText);
            submitBtn.prop('disabled', false);
            
            // Close modal
            $(`#${prefix}CategoryModal`).modal('hide');
            
            // Show success message
            alert('تم حفظ البيانات بنجاح');
            
            // Since we're using client-side processing, we need to reload the page
            // to show the new data, or manually add the row to the table
            // For now, we'll just reload the page
            location.reload();
        }, 1500);
    }
    
    // Function to apply global percentage
    function applyGlobalPercentage(percentage, prefix) {
        $(`#${prefix}CategoryTabContent input[type="number"]`).each(function () {
            if ($(this).val() !== '') {
                $(this).val(percentage);
            }
        });
        
        alert(`تم تطبيق النسبة ${percentage} على جميع الحقول`);
    }
    
    // Function to view category
    function viewCategory(row) {
        // In a real application, you would fetch the data from the server
        // For now, we'll just show the modal
        $('#viewCategoryModal').modal('show');
    }
    
    // Function to edit category
    function editCategory(row) {
        // In a real application, you would populate the form with data from the server
        // For now, we'll just show the modal
        $('#editCategoryModal').modal('show');
    }
    
    // Initialize tooltips
    $('[data-bs-toggle="tooltip"]').tooltip();
    
    // Handle select all columns button
    $('#selectAllColumns').on('click', function () {
        const allChecked = $('#selectAllCheckbox').prop('checked');
        $('.row-checkbox').prop('checked', !allChecked);
        $('#selectAllCheckbox').prop('checked', !allChecked);
    });
    
    // Handle select all checkbox
    $('#selectAllCheckbox').on('change', function () {
        const isChecked = $(this).prop('checked');
        $('.row-checkbox').prop('checked', isChecked);
    });
    
    // Handle print button
    $('#printButton').on('click', function () {
        window.print();
    });
    
    // Handle export to Excel button
    $('#exportExcelButton').on('click', function () {
        alert('تصدير إلى Excel');
        // In a real application, you would implement Excel export functionality here
    });
});
$(document).ready(function () {
    // Handle filter toggle button - Use event delegation to ensure our handler runs
    $(document).off('click', '#toggleFilters').on('click', '#toggleFilters', function(e) {
        e.preventDefault();
        e.stopImmediatePropagation(); // Prevent other handlers from running
        console.log('Pricing Ratios Filter toggle button clicked');
        
        var filterSection = $('#filterSection');
        var icon = $(this).find('i');
        var textSpan = $('#toggleFiltersText');
        
        console.log('Filter section is visible:', filterSection.is(':visible'));
        
        if (filterSection.is(':visible')) {
            // Hide the filter section
            filterSection.hide();
            icon.removeClass('ti-filter-off').addClass('ti-filter');
            textSpan.text('إظهار الفلترة');
            console.log('Hiding filter section');
        } else {
            // Show the filter section
            filterSection.show();
            icon.removeClass('ti-filter').addClass('ti-filter-off');
            textSpan.text('إخفاء الفلترة');
            console.log('Showing filter section');
        }
    });
    
    // Log when document is ready
    console.log('Pricing Ratios document ready');
    
    // Initialize DataTable with client-side processing (static data)
    var pricingRatiosTable = $('#categoriesTable').DataTable({
        "processing": true,
        "serverSide": false, // Changed to client-side processing
        "data": [ // Static data
            [1, 1, "تسديد رصيد موبايل", "يمن موبايل", ""],
            [2, 2, "رصيد وباقة", "شحن فوري يمن موبايل", ""],
            [3, 1, "تسديد الانترنت ADSL", "يو", ""],
            [4, 3, "تسديد الهاتف الثابت", "باقات يو", ""]
        ],
        "columns": [
            { 
                "data": null, 
                "orderable": false, 
                "render": function (data, type, row) {
                    return '<input type="checkbox" class="row-checkbox" data-id="' + row[0] + '">';
                }
            },
            { "data": 0 }, // الرقم (Number)
            { "data": 1 }, // المجموعة (Group)
            { "data": 2 }, // الخدمة (Service)
            { "data": 3 }, // الشبكة (Network)
            { 
                "data": null, 
                "orderable": false, 
                "render": function (data, type, row) {
                    return '<div class="dropdown">' +
                        '<button class="btn btn-sm btn-outline-primary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">' +
                        'للمزيد' +
                        '</button>' +
                        '<ul class="dropdown-menu dropdown-menu-end">' +
                        '<li><a class="dropdown-item" href="#" data-action="edit"><i class="ti ti-pencil me-1"></i> تعديل</a></li>' +
                        '<li><a class="dropdown-item" href="#" data-action="view"><i class="ti ti-eye me-1"></i> مشاهدة</a></li>' +
                        '<li><a class="dropdown-item" href="#"><i class="ti ti-trash me-1"></i> حذف</a></li>' +
                        '</ul>' +
                        '</div>';
                }
            }
        ],
        "language": {
            "url": "https://cdn.datatables.net/plug-ins/1.13.8/i18n/ar.json"
        },
        "order": [[1, "asc"]],
        "pageLength": 10,
        "responsive": true,
        "dom": '<"row"<"col-sm-12 col-md-6"l><"col-sm-12 col-md-6"f>>' +
               '<"row"<"col-sm-12"tr>>' +
               '<"row"<"col-sm-12 col-md-5"i><"col-sm-12 col-md-7"p>>'
    });
    
    // Initialize bootstrap-select for dropdowns
    function initializeSelectPicker() {
        $('.selectpicker').selectpicker({
            style: 'btn-light',
            liveSearch: true,
            liveSearchPlaceholder: 'ابحث...',
            noneSelectedText: 'لم يتم تحديد أي شيء',
            noneResultsText: 'لا توجد نتائج لـ {0}',
            selectAllText: 'تحديد الكل',
            deselectAllText: 'إلغاء تحديد الكل',
            dropupAuto: false,
            width: '100%',
            container: 'body'
        });
    }
    
    // Initialize selectpickers when document is ready
    initializeSelectPicker();
    
    // Re-initialize bootstrap-select when modals are shown
    $('.modal').on('shown.bs.modal', function () {
        $('.selectpicker').selectpicker('refresh');
    });
    
    // Initialize top action buttons as disabled
    $('#topEditButton, #topViewButton').addClass('disabled');
    
    // Handle form submissions with AJAX
    $('#addCategoryForm, #editCategoryForm').on('submit', function (e) {
        e.preventDefault();
        
        const form = $(this);
        const formId = form.attr('id');
        const prefix = formId === 'addCategoryForm' ? 'add' : 'edit';
        
        // Get form data
        const formData = getFormData(prefix);
        
        // Validate form
        if (!validateForm(formData, prefix)) {
            return;
        }
        
        // Submit form via AJAX
        submitFormViaAjax(formData, prefix);
    });
    
    // Handle save button click in modal footer
    $('#addCategoryModal .modal-footer .btn-primary, #editCategoryModal .modal-footer .btn-primary').on('click', function () {
        const modal = $(this).closest('.modal');
        const form = modal.find('form');
        const formId = form.attr('id');
        const prefix = formId === 'addCategoryForm' ? 'add' : 'edit';
        
        // Get form data
        const formData = getFormData(prefix);
        
        // Validate form
        if (!validateForm(formData, prefix)) {
            return;
        }
        
        // Submit form via AJAX
        submitFormViaAjax(formData, prefix);
    });
    
    // Handle global percentage application
    $(document).on('click', '[id$="GlobalPercentage"]', function () {
        const buttonId = $(this).attr('id');
        const prefix = buttonId.replace('GlobalPercentage', '').toLowerCase();
        
        const globalPercentage = $(`#${prefix}-global-percentage`).val();
        
        if (!globalPercentage || globalPercentage < 0 || globalPercentage > 2) {
            alert('الرجاء إدخال نسبة صحيحة بين 0 و 2');
            return;
        }
        
        // Apply the percentage to all fields
        applyGlobalPercentage(globalPercentage, prefix);
    });
    
    // Handle edit from view button
    $('#editFromViewBtn').on('click', function () {
        // Close view modal
        $('#viewCategoryModal').modal('hide');
        
        // Open edit modal (in a real app, you would populate it with data first)
        $('#editCategoryModal').modal('show');
    });
    
    // Handle action buttons in the table
    $('#categoriesTable').on('click', '[data-action]', function (e) {
        e.preventDefault(); // Prevent default action
        const action = $(this).data('action');
        const row = $(this).closest('tr');
        
        switch (action) {
            case 'view':
                viewCategory(row);
                break;
            case 'edit':
                editCategory(row);
                break;
        }
    });
    
    // Function to get form data
    function getFormData(prefix) {
        const data = {
            minAmount: $(`#${prefix}-min-amount`).val(),
            maxAmount: $(`#${prefix}-max-amount`).val(),
            service: $(`#${prefix}-service`).val(),
            currency: $(`#${prefix}-currency`).val(),
            network: $(`#${prefix}-network`).val(),
            pricingGroup: $(`#${prefix}-pricing-group`).val(),
            sendNotification: $(`#${prefix}-send-notification`).is(':checked')
        };
        
        // Get range data
        for (let i = 1; i <= 5; i++) {
            data[`range${i}Min`] = $(`#${prefix}-range${i}-min`).val();
            data[`range${i}Max`] = $(`#${prefix}-range${i}-max`).val();
            data[`range${i}Ratio`] = $(`#${prefix}-range${i}-ratio`).val();
        }
        
        return data;
    }
    
    // Function to validate form
    function validateForm(data, prefix) {
        let isValid = true;
        
        // Clear previous validation states
        $('.is-invalid').removeClass('is-invalid');
        $('.invalid-feedback').remove();
        
        // Validate required fields
        if (!data.minAmount) {
            $(`#${prefix}-min-amount`).addClass('is-invalid');
            $(`#${prefix}-min-amount`).after('<div class="invalid-feedback">الرجاء إدخال الحد الأدنى</div>');
            isValid = false;
        }
        
        if (!data.maxAmount) {
            $(`#${prefix}-max-amount`).addClass('is-invalid');
            $(`#${prefix}-max-amount`).after('<div class="invalid-feedback">الرجاء إدخال الحد الأقصى</div>');
            isValid = false;
        }
        
        // Validate service selection
        if (!data.service) {
            $(`#${prefix}-service`).addClass('is-invalid');
            $(`#${prefix}-service`).after('<div class="invalid-feedback">الرجاء اختيار الخدمة</div>');
            isValid = false;
        }
        
        // Validate network selection
        if (!data.network) {
            $(`#${prefix}-network`).addClass('is-invalid');
            $(`#${prefix}-network`).after('<div class="invalid-feedback">الرجاء اختيار الشبكة</div>');
            isValid = false;
        }
        
        // Validate numeric fields (between 0 and 2 for ratios)
        for (let i = 1; i <= 5; i++) {
            const ratio = data[`range${i}Ratio`];
            if (ratio && (ratio < 0 || ratio > 2)) {
                $(`#${prefix}-range${i}-ratio`).addClass('is-invalid');
                $(`#${prefix}-range${i}-ratio`).after('<div class="invalid-feedback">الرجاء إدخال نسبة بين 0 و 2</div>');
                isValid = false;
            }
        }
        
        return isValid;
    }
    
    // Function to submit form via AJAX
    function submitFormViaAjax(data, prefix) {
        // Show loading indicator
        const submitBtn = $(`#${prefix}CategoryModal .modal-footer .btn-primary`);
        const originalText = submitBtn.html();
        submitBtn.html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> جاري الحفظ...');
        submitBtn.prop('disabled', true);
        
        // In a real application, you would send the data to the server
        // For now, we'll simulate an AJAX call
        setTimeout(function () {
            // Reset button
            submitBtn.html(originalText);
            submitBtn.prop('disabled', false);
            
            // Close modal
            $(`#${prefix}CategoryModal`).modal('hide');
            
            // Show success message
            alert('تم حفظ البيانات بنجاح');
            
            // Reload the DataTable
            pricingRatiosTable.ajax.reload();
        }, 1500);
    }
    
    // Function to apply global percentage
    function applyGlobalPercentage(percentage, prefix) {
        for (let i = 1; i <= 5; i++) {
            if ($(`#${prefix}-range${i}-ratio`).val() !== '') {
                $(`#${prefix}-range${i}-ratio`).val(percentage);
            }
        }
        
        alert(`تم تطبيق النسبة ${percentage} على جميع الحقول`);
    }
    
    // Function to view category
    function viewCategory(row) {
        // In a real application, you would fetch the data from the server
        // For now, we'll just show the modal
        console.log('Showing view modal');
        $('#viewCategoryModal').modal('show');
    }
    
    // Function to edit category
    function editCategory(row) {
        // In a real application, you would populate the form with data from the server
        // For now, we'll just show the modal
        console.log('Showing edit modal');
        $('#editCategoryModal').modal('show');
    }
    
    // Initialize tooltips
    $('[data-bs-toggle="tooltip"]').tooltip();
    
    // Handle select all columns button
    $('#selectAllColumns').on('click', function () {
        const allChecked = $('#selectAllCheckbox').prop('checked');
        $('.row-checkbox').prop('checked', !allChecked);
        $('#selectAllCheckbox').prop('checked', !allChecked);
        // Enable/disable top action buttons based on selection
        toggleTopActionButtons();
    });
    
    // Handle individual row checkbox changes
    $('#categoriesTable tbody').on('change', '.row-checkbox', function () {
        // Enable/disable top action buttons based on selection
        toggleTopActionButtons();
    });
    
    // Function to enable/disable top action buttons based on row selection
    function toggleTopActionButtons() {
        const selectedRows = $('.row-checkbox:checked').length;
        if (selectedRows === 1) {
            $('#topEditButton, #topViewButton').removeClass('disabled');
        } else if (selectedRows === 0) {
            $('#topEditButton, #topViewButton').addClass('disabled');
        } else {
            // Multiple rows selected - only allow view in this example
            $('#topEditButton').addClass('disabled');
            $('#topViewButton').removeClass('disabled');
        }
    }
    
    // Handle top edit button click
    $('#topEditButton').on('click', function (e) {
        e.preventDefault();
        const selectedRows = $('.row-checkbox:checked');
        if (selectedRows.length === 1) {
            // Get the row data
            const row = selectedRows.closest('tr');
            editCategory(row);
        } else {
            alert('الرجاء تحديد صف واحد للتعديل');
        }
    });
    
    // Handle top view button click
    $('#topViewButton').on('click', function (e) {
        e.preventDefault();
        const selectedRows = $('.row-checkbox:checked');
        if (selectedRows.length >= 1) {
            // Get the first selected row data
            const row = selectedRows.first().closest('tr');
            viewCategory(row);
        } else {
            alert('الرجاء تحديد صف واحد على الأقل للمشاهدة');
        }
    });
    
    // Handle print button
    $('#printButton').on('click', function () {
        window.print();
    });
    
    // Handle export to Excel button
    $('#exportExcelButton').on('click', function () {
        alert('تصدير إلى Excel');
        // In a real application, you would implement Excel export functionality here
    });
    
    // Handle filter application
    $('#applyFilters').on('click', function () {
        // Get filter values
        var filterPricingGroup = $('#filter-pricing-group').val();
        var filterAllServices = $('#filter-all-services').val();
        var filterRecords = $('#rowsCount').val();

        // Apply filters to DataTable
        // Note: Column index 1 is now the pricing group column (was ID column)
        pricingRatiosTable.column(1).search(filterPricingGroup && filterPricingGroup !== "مجموعة التسعيرة" ? filterPricingGroup : '').draw();
        // Column index 2 is now the service column (was min amount column)
        pricingRatiosTable.column(2).search(filterAllServices && filterAllServices !== "كل الخدمات" ? filterAllServices : '').draw();
        
        // Set page length based on records filter
        if (filterRecords) {
            pricingRatiosTable.page.len(filterRecords).draw();
        }
    });
    
    // Handle reset filters button
    $('#resetFilters').on('click', function () {
        // Reset all filter input fields
        $('#filter-pricing-group').selectpicker('val', '');
        $('#filter-all-services').selectpicker('val', '');
        $('#rowsCount').selectpicker('val', '30');
        
        // Refresh the selectpickers to show the placeholders
        $('#filter-pricing-group').selectpicker('refresh');
        $('#filter-all-services').selectpicker('refresh');
        $('#rowsCount').selectpicker('refresh');
        
        // Reset DataTable page length to default (30 as requested)
        pricingRatiosTable.page.len(30).draw();
        
        // Clear DataTable filters
        pricingRatiosTable.search('').columns().search('').draw();
        
        alert('تم إعادة تعيين الفلاتر');
    });
});
$(function () {
    // Variable to track the currently selected row
    let selectedRow = null;
    
    // Initialize DataTable
    const dt = $("#categoriesTable").DataTable({
        paging: true,
        lengthChange: false,
        searching: false,
        ordering: true,
        info: true,
        autoWidth: false,
        responsive: true,
        // Define columns to match the new table structure
        columnDefs: [
            { targets: 0, width: "40px", className: "text-center" }, // Checkbox column
            { targets: 1, width: "auto" }, // ID column
            { targets: 2, width: "auto" }, // Service name column
            { targets: 3, width: "auto" }, // Default price column
            { targets: 4, width: "100px", className: "text-center" } // Actions column
        ],
        // Add buttons extension
        dom: 'Bfrtip',
        buttons: [
            {
                extend: 'print',
                text: 'طباعه',
                className: 'btn btn-outline-secondary btn-sm',
                exportOptions: {
                    columns: ':visible'
                }
            },
            {
                extend: 'colvis',
                text: 'تحديد الحقول',
                className: 'btn btn-outline-secondary btn-sm',
                collectionLayout: 'fixed two-column'
            },
            {
                extend: 'excelHtml5',
                text: 'تصدير اكسل',
                className: 'btn btn-outline-secondary btn-sm',
                exportOptions: {
                    columns: ':visible'
                }
            }
        ],
        language: {
            emptyTable: "لا توجد بيانات",
            info: "إظهار _START_ إلى _END_ من _TOTAL_ سجل",
            infoEmpty: "إظهار 0 إلى 0 من 0",
            paginate: { first:"الأولى", last:"الأخيرة", next:"التالي", previous:"السابق" },
            buttons: {
                colvis: 'تحديد الحقول',
                print: 'طباعه',
                excel: 'تصدير اكسل'
            }
        }
    });
    
    // Move buttons to filter section
    dt.buttons().container().appendTo('#datatables-buttons-container');
    
    // Hide the default buttons container since we're using custom buttons
    $('.dt-buttons').hide();
    
    // Reinitialize buttons when filter section is shown
    $('#toggleFilters').on('click', function() {
        setTimeout(function() {
            // Refresh button styles when filter section is toggled
            $('.dt-buttons .btn').addClass('btn-sm');
        }, 100);
    });
    
    // Ensure buttons are properly styled after initialization
    setTimeout(function() {
        $('.dt-buttons .btn').addClass('btn-sm');
    }, 500);
    
    // Handle filter toggle button
    $('#toggleFilters').on('click', function() {
        var filterSection = $('#filterSection');
        var icon = $(this).find('i');
        var textSpan = $('#toggleFiltersText');
        
        if (filterSection.is(':visible')) {
            // Hide the filter section
            filterSection.hide();
            icon.removeClass('ti-filter-off').addClass('ti-filter');
            textSpan.text('إظهار الفلترة');
        } else {
            // Show the filter section
            filterSection.show();
            icon.removeClass('ti-filter').addClass('ti-filter-off');
            textSpan.text('إخفاء الفلترة');
        }
    });
    
    // Initialize bootstrap-select for category selection with enhanced options
    function initializeSelectPicker() {
        $('.selectpicker').selectpicker({
            style: 'btn-light',
            liveSearch: true,
            liveSearchPlaceholder: 'ابحث...',
            noneSelectedText: 'لم يتم تحديد أي شيء',
            noneResultsText: 'لا توجد نتائج لـ {0}',
            selectAllText: 'تحديد الكل',
            deselectAllText: 'إلغاء تحديد الكل',
            dropupAuto: false,   // منع السلوك التلقائي
            width: '100%',
            container: 'body'    // إخراج القائمة خارج أي كارد/مودال
        });
    }
    
    // Initialize selectpickers when document is ready
    initializeSelectPicker();
    
    // Re-initialize bootstrap-select when modals are shown or hidden
    $('.modal').on('shown.bs.modal hidden.bs.modal', function () {
        $('.selectpicker').selectpicker('refresh');
    });

    // Handle reset filters button
    $('#resetFilters').on('click', function() {
        // Reset all filter input fields
        $('#filter-id').val('');
        $('#filter-service-name').val('');
        $('#filter-default-price').val('');
        $('#filter-year').selectpicker('val', '');
        $('#filter-records').selectpicker('val', '');
        $('.selectpicker').selectpicker('refresh');
        alert('تم إعادة تعيين الفلاتر');
    });
    
    // Handle row selection
    $('#categoriesTable tbody').on('click', 'tr', function(e) {
        // Prevent row selection when clicking on action buttons or dropdowns
        if ($(e.target).closest('.dropdown-toggle, .dropdown-menu, .btn').length) {
            return;
        }
        
        // Toggle selection
        if ($(this).hasClass('selected')) {
            $(this).removeClass('selected');
            selectedRow = null;
        } else {
            // Remove selection from other rows
            $('#categoriesTable tbody tr.selected').removeClass('selected');
            $(this).addClass('selected');
            selectedRow = $(this);
        }
        
        // Enable/disable top action buttons based on selection
        if (selectedRow) {
            $('#topEditButton, #topViewButton').removeClass('disabled');
        } else {
            $('#topEditButton, #topViewButton').addClass('disabled');
        }
    });
    
    // Handle select all checkbox
    $('#selectAll').on('change', function() {
        const isChecked = $(this).is(':checked');
        $('.category-checkbox').prop('checked', isChecked);
        
        // If all rows are selected, enable top action buttons
        if (isChecked) {
            $('#topEditButton, #topViewButton').removeClass('disabled');
        } else {
            $('#topEditButton, #topViewButton').addClass('disabled');
            selectedRow = null;
        }
    });
    
    // Handle individual checkbox selection
    $('#categoriesTable tbody').on('change', '.category-checkbox', function() {
        // If any checkbox is checked, enable top action buttons
        if ($('.category-checkbox:checked').length > 0) {
            $('#topEditButton, #topViewButton').removeClass('disabled');
        } else {
            $('#topEditButton, #topViewButton').addClass('disabled');
            selectedRow = null;
        }
    });
    
    // Handle top action buttons
    $('#topEditButton').on('click', function(e) {
        e.preventDefault();
        if (selectedRow) {
            editPackage(selectedRow);
        } else {
            alert('الرجاء تحديد صف أولاً');
        }
    });
    
    $('#topViewButton').on('click', function(e) {
        e.preventDefault();
        if (selectedRow) {
            viewPackage(selectedRow);
        } else {
            alert('الرجاء تحديد صف أولاً');
        }
    });
    
    // Handle action buttons in the table
    $('#categoriesTable').on('click', '[data-action]', function (e) {
        e.preventDefault(); // Prevent default action
        const action = $(this).data('action');
        const row = $(this).closest('tr');
        
        switch (action) {
            case 'view':
                viewPackage(row);
                break;
            case 'edit':
                editPackage(row);
                break;
        }
    });
    
    // Function to view package
    function viewPackage(row) {
        // In a real application, you would fetch the data from the server
        // For now, we'll just show the modal with placeholder content
        console.log('Showing view modal');
        
        // Set the service details content (assuming it's stored in a variable or fetched from server)
        // For demonstration, we'll use a placeholder
        const serviceDetailsContent = "تفاصيل الخدمة سيتم عرضها هنا";
        $('#view-service-details').html(serviceDetailsContent);
        
        $('#viewServiceModal').modal('show');
    }
    
    // Function to edit package
    function editPackage(row) {
        // In a real application, you would populate the form with data from the server
        // For now, we'll just show the modal with placeholder content
        console.log('Showing edit modal');
        
        // If CKEditor is initialized, set its content
        if (typeof editServiceEditor !== 'undefined' && editServiceEditor) {
            // Set placeholder content for demonstration
            const serviceDetailsContent = "تفاصيل الخدمة الموجودة مسبقاً";
            editServiceEditor.setData(serviceDetailsContent);
        }
        
        $('#editServiceModal').modal('show');
    }
    
    // Handle form submissions with AJAX
    $('#addServiceForm, #editServiceForm').on('submit', function (e) {
        e.preventDefault();
        
        const form = $(this);
        const formId = form.attr('id');
        const prefix = formId === 'addServiceForm' ? 'add' : 'edit';
        
        // Get form data
        const formData = getFormData(prefix);
        
        // Validate form
        if (!validateForm(formData, prefix)) {
            return;
        }
        
        // Submit form via AJAX
        submitFormViaAjax(formData, prefix);
    });
    
    // Handle save button click in modal footer
    $('#addServiceModal .modal-footer .btn-primary, #editServiceModal .modal-footer .btn-primary').on('click', function () {
        const modal = $(this).closest('.modal');
        const form = modal.find('form');
        const formId = form.attr('id');
        const prefix = formId === 'addServiceForm' ? 'add' : 'edit';
        
        // Get form data
        const formData = getFormData(prefix);
        
        // Validate form
        if (!validateForm(formData, prefix)) {
            return;
        }
        
        // Submit form via AJAX
        submitFormViaAjax(formData, prefix);
    });
    
    // Function to get form data
    function getFormData(prefix) {
        // Get the editor content if CKEditor is initialized
        let serviceDetailsContent = $(`#${prefix}-service-details`).val();
        if (prefix === 'add' && typeof addServiceEditor !== 'undefined' && addServiceEditor) {
            serviceDetailsContent = addServiceEditor.getData();
        } else if (prefix === 'edit' && typeof editServiceEditor !== 'undefined' && editServiceEditor) {
            serviceDetailsContent = editServiceEditor.getData();
        }

        const data = {
            serviceName: $(`#${prefix}-service-name`).val(),
            defaultPrice: $(`#${prefix}-default-price`).val(),
            serviceCurrency: $(`#${prefix}-service-currency`).val(),
            dollarPrice: $(`#${prefix}-dollar-price`).val(),
            sarPrice: $(`#${prefix}-sar-price`).val(),
            employeePrice: $(`#${prefix}-employee-price`).val(),
            submitButtonName: $(`#${prefix}-submit-button-name`).val(),
            uniqueLinkNumber: $(`#${prefix}-unique-link-number`).val(),
            linkNumber: $(`#${prefix}-link-number`).val(),
            linkAmount: $(`#${prefix}-link-amount`).val(),
            networkNumber: $(`#${prefix}-network-number`).val(),
            games: $(`#${prefix}-games`).val(),
            cards: $(`#${prefix}-cards`).val(),
            videoApps: $(`#${prefix}-videoapps`).val(),
            sections: $(`#${prefix}-sections`).val(),
            amountCalculation: $(`#${prefix}-amount-calculation`).val(),
            commissionCalculation: $(`#${prefix}-commission-calculation`).val(),
            extraAmountSim: $(`#${prefix}-extra-amount-sim`).val(),
            extraAmountProgramming: $(`#${prefix}-extra-amount-programming`).val(),
            extraAmountGeneral: $(`#${prefix}-extra-amount-general`).val(),
            serviceDetails: serviceDetailsContent,
            showImage: $(`#${prefix}-show-image`).is(':checked'),
            showIcon: $(`#${prefix}-show-icon`).is(':checked'),
            iconColor: $(`#${prefix}-icon-color`).val(),
            iconBgColor: $(`#${prefix}-icon-bg-color`).val(),
            textColor: $(`#${prefix}-text-color`).val(),
            textBgColor: $(`#${prefix}-text-bg-color`).val()
        };
        
        return data;
    }
    
    // Function to validate form
    function validateForm(data, prefix) {
        let isValid = true;
        
        // Clear previous validation states
        $('.is-invalid').removeClass('is-invalid');
        $('.invalid-feedback').remove();
        
        // Validate required fields
        if (!data.serviceName) {
            $(`#${prefix}-service-name`).addClass('is-invalid');
            $(`#${prefix}-service-name`).after('<div class="invalid-feedback">الرجاء إدخال اسم الخدمة</div>');
            isValid = false;
        }
        
        if (!data.defaultPrice) {
            $(`#${prefix}-default-price`).addClass('is-invalid');
            $(`#${prefix}-default-price`).after('<div class="invalid-feedback">الرجاء إدخال السعر الافتراضي</div>');
            isValid = false;
        }
        
        if (!data.serviceCurrency) {
            $(`#${prefix}-service-currency`).addClass('is-invalid');
            $(`#${prefix}-service-currency`).after('<div class="invalid-feedback">الرجاء اختيار عملة الخدمة</div>');
            isValid = false;
        }
        
        if (!data.dollarPrice) {
            $(`#${prefix}-dollar-price`).addClass('is-invalid');
            $(`#${prefix}-dollar-price`).after('<div class="invalid-feedback">الرجاء إدخال السعر بالدولار</div>');
            isValid = false;
        }
        
        if (!data.sarPrice) {
            $(`#${prefix}-sar-price`).addClass('is-invalid');
            $(`#${prefix}-sar-price`).after('<div class="invalid-feedback">الرجاء إدخال السعر بالريال السعودي</div>');
            isValid = false;
        }
        
        if (!data.employeePrice) {
            $(`#${prefix}-employee-price`).addClass('is-invalid');
            $(`#${prefix}-employee-price`).after('<div class="invalid-feedback">الرجاء إدخال سعر الخدمة للموظف</div>');
            isValid = false;
        }
        
        if (!data.submitButtonName) {
            $(`#${prefix}-submit-button-name`).addClass('is-invalid');
            $(`#${prefix}-submit-button-name`).after('<div class="invalid-feedback">الرجاء إدخال اسم زر التقديم</div>');
            isValid = false;
        }
        
        if (!data.amountCalculation) {
            $(`#${prefix}-amount-calculation`).addClass('is-invalid');
            $(`#${prefix}-amount-calculation`).after('<div class="invalid-feedback">الرجاء إدخال حساب المبلغ</div>');
            isValid = false;
        }
        
        if (!data.commissionCalculation) {
            $(`#${prefix}-commission-calculation`).addClass('is-invalid');
            $(`#${prefix}-commission-calculation`).after('<div class="invalid-feedback">الرجاء إدخال حساب العمولة</div>');
            isValid = false;
        }
        
        // Validate service details (CKEditor content)
        if (!data.serviceDetails || data.serviceDetails.trim() === '') {
            // Add visual indicator for CKEditor validation
            const editorElement = $(`#${prefix}-service-details`).closest('.ck-editor');
            if (editorElement.length > 0) {
                editorElement.addClass('is-invalid');
                editorElement.after('<div class="invalid-feedback d-block">الرجاء إدخال تفاصيل الخدمة</div>');
            } else {
                $(`#${prefix}-service-details`).addClass('is-invalid');
                $(`#${prefix}-service-details`).after('<div class="invalid-feedback">الرجاء إدخال تفاصيل الخدمة</div>');
            }
            isValid = false;
        } else {
            // Remove invalid state if content exists
            const editorElement = $(`#${prefix}-service-details`).closest('.ck-editor');
            if (editorElement.length > 0) {
                editorElement.removeClass('is-invalid');
                const feedback = editorElement.next('.invalid-feedback');
                if (feedback.length > 0) {
                    feedback.remove();
                }
            }
        }
        
        if (!$(`#${prefix}-service-image`)[0].files.length && prefix === 'add') {
            $(`#${prefix}-service-image`).addClass('is-invalid');
            $(`#${prefix}-service-image`).after('<div class="invalid-feedback">الرجاء اختيار صورة</div>');
            isValid = false;
        }
        
        if (!data.iconColor) {
            $(`#${prefix}-icon-color`).addClass('is-invalid');
            $(`#${prefix}-icon-color`).after('<div class="invalid-feedback">الرجاء اختيار لون الايقونة</div>');
            isValid = false;
        }
        
        if (!data.iconBgColor) {
            $(`#${prefix}-icon-bg-color`).addClass('is-invalid');
            $(`#${prefix}-icon-bg-color`).after('<div class="invalid-feedback">الرجاء اختيار لون خلفية الايقونة</div>');
            isValid = false;
        }
        
        if (!data.textColor) {
            $(`#${prefix}-text-color`).addClass('is-invalid');
            $(`#${prefix}-text-color`).after('<div class="invalid-feedback">الرجاء اختيار لون النص</div>');
            isValid = false;
        }
        
        if (!data.textBgColor) {
            $(`#${prefix}-text-bg-color`).addClass('is-invalid');
            $(`#${prefix}-text-bg-color`).after('<div class="invalid-feedback">الرجاء اختيار لون خلفية النص</div>');
            isValid = false;
        }
        
        return isValid;
    }
    
    // Function to submit form via AJAX
    function submitFormViaAjax(data, prefix) {
        // Show loading indicator
        const submitBtn = $(`#${prefix}PackageModal .modal-footer .btn-primary`);
        const originalText = submitBtn.html();
        submitBtn.html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> جاري الحفظ...');
        submitBtn.prop('disabled', true);
        
        // In a real application, you would send the data to the server
        // For now, we'll simulate an AJAX call
        setTimeout(function () {
            // Reset button
            submitBtn.html(originalText);
            submitBtn.prop('disabled', false);
            
            // Close modal
            $(`#${prefix}ServiceModal`).modal('hide');
            
            // Show success message
            alert('تم حفظ البيانات بنجاح');
            
            // Reload the DataTable
            dt.ajax.reload();
        }, 1500);
    }
    
    // Handle edit from view modal
    $('#editFromViewBtn').on('click', function() {
        $('#viewServiceModal').modal('hide');
        $('#editServiceModal').modal('show');
    });
});
$(function () {

  const SettingsManager = {

    init: function () {
      this.initDataTable();
      this.initSelectPicker();
      this.bindEvents();
      
      // Additional initialization for selectpickers in modals
      // Refresh selectpickers when the document is fully loaded
      const self = this;
      $(document).ready(function() {
        setTimeout(function() {
          $('.selectpicker').selectpicker('refresh');
          // Also initialize any dynamically added selectpickers
          self.initSelectPicker();
        }, 200);
      });
    },

    // 🧩 تهيئة الجدول
    initDataTable: function () {
      if (!$("#myTable").length) return;
      
      // Initialize DataTable with proper column configuration
      const table = $("#myTable").DataTable({
        paging: true,
        lengthChange: false,
        searching: false,
        ordering: true,
        info: true,
        autoWidth: false,
        responsive: true,
        pageLength: 10,
        columnDefs: [
          { 
            targets: [0, 11], // First and last columns (checkbox and actions)
            orderable: false,
            searchable: false
          }
        ],
        language: {
          emptyTable: "لا توجد بيانات",
          info: "إظهار _START_ إلى _END_ من _TOTAL_ سجل",
          infoEmpty: "إظهار 0 إلى 0 من 0",
          paginate: {
            first: "الأولى",
            last: "الأخيرة",
            next: "التالي",
            previous: "السابق"
          }
        },
        // Initialize dropdowns after table draw
        drawCallback: function() {
          // Small delay to ensure DOM is fully rendered
          setTimeout(function() {
            // Initialize Bootstrap dropdowns in the table
            $('#myTable .dropdown-toggle').each(function() {
              try {
                // Check if dropdown is already initialized
                if (!bootstrap.Dropdown.getInstance(this)) {
                  new bootstrap.Dropdown(this);
                }
              } catch (e) {
                console.error('Error initializing dropdown:', e);
              }
            });
          }, 100);
        }
      });
      
      // Initialize dropdowns after initial table creation with a small delay
      setTimeout(function() {
        $('#myTable .dropdown-toggle').each(function() {
          try {
            // Check if dropdown is already initialized
            if (!bootstrap.Dropdown.getInstance(this)) {
              new bootstrap.Dropdown(this);
            }
          } catch (e) {
            console.error('Error initializing dropdown:', e);
          }
        });
      }, 200);
      
      // Also initialize dropdowns when the table is fully loaded
      $('#myTable').on('init.dt', function() {
        setTimeout(function() {
          $('#myTable .dropdown-toggle').each(function() {
            try {
              // Check if dropdown is already initialized
              if (!bootstrap.Dropdown.getInstance(this)) {
                new bootstrap.Dropdown(this);
              }
            } catch (e) {
              console.error('Error initializing dropdown:', e);
            }
          });
        }, 300);
      });
    },

    // 🧩 تهيئة القوائم المنسدلة
    initSelectPicker: function () {
      try {
        // Destroy any existing selectpickers to prevent conflicts
        $('.selectpicker').selectpicker('destroy');
      } catch (e) {
        // Ignore errors if selectpickers weren't initialized before
        console.log('No existing selectpickers to destroy');
      }
      
      try {
        $('.selectpicker').selectpicker({
          style: 'btn-light',
          liveSearch: true,
          liveSearchPlaceholder: 'ابحث...',
          noneSelectedText: 'لم يتم تحديد أي شيء',
          noneResultsText: 'لا توجد نتائج لـ {0}',
          selectAllText: 'تحديد الكل',
          deselectAllText: 'إلغاء تحديد الكل',
          dropupAuto: false,
          width: '100%',
          container: 'body',
          liveSearchStyle: 'contains',
          mobile: true,
          showTick: true,
          iconBase: 'glyphicon',
          tickIcon: 'glyphicon-ok'
        });
      } catch (e) {
        console.error('Error initializing selectpickers:', e);
      }
      
      // Refresh selectpickers when modals are shown
      $('.modal').on('shown.bs.modal', function() {
        try {
          $('.selectpicker', this).selectpicker('refresh');
          // Also ensure proper positioning of dropdown menus
          $('.selectpicker', this).selectpicker('setStyle', 'btn-light');
          
          // Force visibility of search box in modals
          $('.selectpicker', this).each(function() {
            var selectpicker = $(this);
            selectpicker.on('shown.bs.select', function() {
              var dropdown = selectpicker.data('selectpicker').$dropdownMenu;
              dropdown.find('.bs-searchbox').css({
                'display': 'block',
                'visibility': 'visible'
              });
              dropdown.find('.bs-searchbox .form-control').css({
                'display': 'block',
                'visibility': 'visible'
              });
              
              // Ensure the search input is focused
              setTimeout(function() {
                dropdown.find('.bs-searchbox .form-control').focus();
              }, 10);
            });
          });
        } catch (e) {
          console.error('Error refreshing selectpickers in modal:', e);
        }
      });
      
      // Also refresh selectpickers when modals are hidden
      $('.modal').on('hidden.bs.modal', function() {
        try {
          $('.selectpicker', this).selectpicker('refresh');
        } catch (e) {
          console.error('Error refreshing selectpickers in modal:', e);
        }
      });
      
      // Refresh all selectpickers after a short delay to ensure proper rendering
      setTimeout(function() {
        try {
          $('.selectpicker').selectpicker('refresh');
          // Debug: Log the number of selectpickers initialized
          console.log('Selectpickers initialized:', $('.selectpicker').length);
        } catch (e) {
          console.error('Error refreshing selectpickers:', e);
        }
      }, 100);
      
      // Additional refresh for modals with longer delay
      setTimeout(function() {
        try {
          $('.modal .selectpicker').selectpicker('refresh');
          console.log('Modal selectpickers refreshed:', $('.modal .selectpicker').length);
        } catch (e) {
          console.error('Error refreshing modal selectpickers:', e);
        }
      }, 500);
      
      // Re-initialize selectpickers if new ones are added dynamically
      $(document).on('DOMNodeInserted', function(e) {
        if ($(e.target).find('.selectpicker').length > 0) {
          try {
            $(e.target).find('.selectpicker').selectpicker('refresh');
            console.log('New selectpickers added and refreshed');
          } catch (e) {
            console.error('Error refreshing new selectpickers:', e);
          }
        }
      });
      
      // Ensure search box is visible for all selectpickers
      $('.selectpicker').each(function() {
        var selectpicker = $(this);
        selectpicker.on('shown.bs.select', function() {
          var dropdown = selectpicker.data('selectpicker').$dropdownMenu;
          if (dropdown) {
            dropdown.find('.bs-searchbox').css({
              'display': 'block',
              'visibility': 'visible'
            });
            dropdown.find('.bs-searchbox .form-control').css({
              'display': 'block',
              'visibility': 'visible'
            });
          }
        });
      });
    },

    // 🧩 كل الأحداث
    bindEvents: function () {
      // إظهار/إخفاء الفلاتر
      $('#toggleFilters').on('click', () => {
        $('#filterSection').toggleClass('show');
        const visible = $('#filterSection').hasClass('show') || $('#filterSection').is(':visible');
        $('#toggleFiltersText').text(visible ? 'إخفاء الفلترة' : 'إظهار الفلترة');
        $('#toggleFilters i').toggleClass('ti-filter-off ti-filter');
        
        // Ensure proper display
        if (visible) {
          $('#filterSection').css('display', 'block');
        } else {
          $('#filterSection').css('display', 'none');
        }
      });

      // فتح وإغلاق مودالات
      // Removed old modal references

      // الحفظ في نموذج الإضافة
      // Removed old form handler

      // الحفظ في نموذج التعديل
      // Removed old form handler

      // الحفظ في الإعدادات الأساسية
      // Removed old form handler

      // عرض الإعداد / تعديل / حذف من الجدول
      $('tbody')
        .on('click', '[data-action="view"]', e => this.handleView(e))
        .on('click', '[data-action="edit"]', e => this.handleEdit(e))
        .on('click', '[data-action="delete"]', e => this.handleDelete(e));

      // أزرار علويّة
      $('#topViewButton').on('click', () => this.viewSelected());
      $('#topEditButton').on('click', () => this.editSelected());
      $('#deleteSelectedButton').on('click', () => this.deleteSelected());

      // الفلاتر
      $('#resetFilters').on('click', () => this.resetFilters());
      $('#searchButton').on('click', () => this.showInfo('سيتم تطبيق الفلاتر المحددة'));

      // تصدير وطباعة
      $('#exportExcelButton, #exportDataButton').on('click', () => this.showInfo('سيتم تصدير البيانات إلى Excel'));
      $('#printButton, #printReportButton').on('click', () => this.showInfo('سيتم طباعة التقرير'));

      // أزرار القائمة المنبثقة
      // Removed old popup menu references

      // تحديث البيانات
      $('#refreshBtn').on('click', () => this.showInfo('تحديث البيانات'));

      // تحديد الكل
      $('#selectAll').on('click', e => $('.employee-checkbox').prop('checked', e.target.checked));
      $('.employee-checkbox').on('change', () => this.syncSelectAll());

      // مزامنة الخدمة اليدوية
      $('#editWholesaleYoService, #addWholesaleYoService').on('change', e => this.syncManualService(e));

      // معاينة التصميم
      $('#previewDesignBtn').on('click', () => this.previewDesign());
    },

    // 🧩 دالة إشعارات عامة
    notify: function (msg, type = 'info') {
      const types = { success: 'alert-success', warning: 'alert-warning', error: 'alert-danger', info: 'alert-info' };
      const alertClass = types[type] || types.info;
      const el = $(`
        <div class="alert ${alertClass} alert-dismissible fade show settings-notification" role="alert">
          ${msg}
          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
      `);
      $('body').append(el);
      setTimeout(() => el.fadeOut(() => el.remove()), 3000);
    },
    showInfo: function (msg) { this.notify(msg, 'info'); },

    // 🧩 التعامل مع نموذج الإضافة
    // Removed old form handler

    // 🧩 التعامل مع نموذج التعديل
    // Removed old form handler

    // 🧩 حفظ الإعدادات الأساسية
    // Removed old form handler

    // 🧩 عرض إعداد من الجدول
    handleView: function (e) {
      e.preventDefault();
      // Removed old modal functionality
      this.showInfo('عرض الإعدادات');
    },

    // 🧩 تعديل إعداد من الجدول
    handleEdit: function (e) {
      e.preventDefault();
      // Removed old modal functionality
      this.showInfo('تعديل الإعدادات');
    },

    // 🧩 حذف إعداد من الجدول
    handleDelete: function (e) {
      e.preventDefault();
      // Removed old modal functionality
      this.showInfo('حذف الإعدادات');
    },

    // 🧩 تعبئة النماذج
    // Removed old form filling functions

    // 🧩 عرض من الأزرار العلوية
    viewSelected: function () {
      // Removed old modal functionality
      this.showInfo('عرض الإعدادات المحددة');
    },

    editSelected: function () {
      // Removed old modal functionality
      this.showInfo('تعديل الإعدادات المحددة');
    },

    deleteSelected: function () {
      // Removed old modal functionality
      this.showInfo('حذف الإعدادات المحددة');
    },

    // 🧩 الفلاتر
    resetFilters: function () {
      $('#filter-setting-name, #filter-setting-value, #filter-setting-description, #filter-setting-group').val('');
      this.notify('تم إعادة تعيين الفلاتر', 'success');
    },

    // 🧩 المزامنة بين الحقول
    syncManualService: function (e) {
      const val = $(e.target).val();
      const target = $(e.target).is('#editWholesaleYoService') ? '#editManualServices' : '#addManualServices';
      const input = $(target);
      if (val && val !== 'اختر الخدمة') {
        const cur = input.val();
        const arr = cur ? cur.split('-') : [];
        if (!arr.includes(val)) input.val(cur ? `${cur}-${val}` : val);
      }
    },

    // 🧩 تحديد الكل
    syncSelectAll: function () {
      $('#selectAll').prop('checked', $('.employee-checkbox:checked').length === $('.employee-checkbox').length);
    },

    // 🧩 معاينة التصميم
    previewDesign: function () {
      const designNumber = $('#designNumber').val();
      if (!designNumber) return this.notify('يرجى إدخال رقم التصميم أولاً', 'warning');
      if (!['0', '1', '2'].includes(designNumber)) return this.notify('يرجى إدخال رقم تصميم صحيح (0، 1، أو 2)', 'warning');
      
      // في تطبيق حقيقي، سيتم فتح نافذة معاينة التصميم
      // this.notify(`معاينة التصميم رقم ${designNumber} - سيتم فتح نافذة المعاينة في التطبيق الحقيقي`, 'info');
      
      // فتح نافذة معاينة التصميم
      window.open(`/DesignPreviews/Design${designNumber}`, '_blank');
    }
  };

  // تشغيل النظام
  SettingsManager.init();
  window.saveBasicSettings = () => $('#basicSettingsForm').submit();

});
$(function () {
    // Initialize DataTable
    const dt = $("#categoriesTable").DataTable({
        paging: true,
        lengthChange: false,
        searching: false,
        ordering: true,
        info: true,
        autoWidth: false,
        responsive: true,
        // Add buttons extension
        dom: 'Bfrtip',
        buttons: [
            {
                extend: 'print',
                text: 'طباعه',
                className: 'btn btn-outline-secondary btn-sm',
                exportOptions: {
                    columns: ':visible'
                }
            },
            {
                extend: 'colvis',
                text: 'تحديد الحقول',
                className: 'btn btn-outline-secondary btn-sm',
                collectionLayout: 'fixed two-column'
            },
            {
                extend: 'excelHtml5',
                text: 'تصدير اكسل',
                className: 'btn btn-outline-secondary btn-sm',
                exportOptions: {
                    columns: ':visible'
                }
            }
        ],
        language: {
            emptyTable: "لا توجد بيانات",
            info: "إظهار _START_ إلى _END_ من _TOTAL_ سجل",
            infoEmpty: "إظهار 0 إلى 0 من 0",
            paginate: { first:"الأولى", last:"الأخيرة", next:"التالي", previous:"السابق" },
            buttons: {
                colvis: 'تحديد الحقول',
                print: 'طباعه',
                excel: 'تصدير اكسل'
            }
        }
    });
    
    // Move buttons to filter section
    dt.buttons().container().appendTo('#datatables-buttons-container');
    
    // Hide the default buttons container since we're using custom buttons
    $('.dt-buttons').hide();
    
    // Reinitialize buttons when filter section is shown
    $('#toggleFilters').on('click', function() {
        setTimeout(function() {
            // Refresh button styles when filter section is toggled
            $('.dt-buttons .btn').addClass('btn-sm');
        }, 100);
    });
    
    // Ensure buttons are properly styled after initialization
    setTimeout(function() {
        $('.dt-buttons .btn').addClass('btn-sm');
    }, 500);
    
    // Handle filter toggle button
    $('#toggleFilters').on('click', function() {
        var filterSection = $('#filterSection');
        var icon = $(this).find('i');
        var textSpan = $('#toggleFiltersText');
        
        if (filterSection.is(':visible')) {
            // Hide the filter section
            filterSection.hide();
            icon.removeClass('ti-filter-off').addClass('ti-filter');
            textSpan.text('إظهار الفلترة');
        } else {
            // Show the filter section
            filterSection.show();
            icon.removeClass('ti-filter').addClass('ti-filter-off');
            textSpan.text('إخفاء الفلترة');
        }
    });
    
    // Initialize bootstrap-select for category selection with enhanced options
    function initializeSelectPicker() {
        $('.selectpicker').selectpicker({
            style: 'btn-light',
            liveSearch: true,
            liveSearchPlaceholder: 'ابحث...',
            noneSelectedText: 'لم يتم تحديد أي شيء',
            noneResultsText: 'لا توجد نتائج لـ {0}',
            selectAllText: 'تحديد الكل',
            deselectAllText: 'إلغاء تحديد الكل',
            dropupAuto: false,   // منع السلوك التلقائي
            width: '100%',
            container: 'body'    // إخراج القائمة خارج أي كارد/مودال
        });
    }
    
    // Initialize selectpickers when document is ready
    initializeSelectPicker();
    
    // Re-initialize bootstrap-select when modals are shown or hidden
    $('.modal').on('shown.bs.modal hidden.bs.modal', function () {
        $('.selectpicker').selectpicker('refresh');
    });

    // Handle reset filters button
    $('#resetFilters').on('click', function() {
        // Reset all filter input fields
        $('#filter-id').val('');
        $('#filter-package-name').val('');
        $('#filter-package-price').val('');
        $('#filter-year').selectpicker('val', '');
        $('#filter-records').selectpicker('val', '');
        $('.selectpicker').selectpicker('refresh');
        alert('تم إعادة تعيين الفلاتر');
    });
    
    // Handle set price button functionality
    $(document).on('click', '[id$="-set-price-btn"]', function() {
        var prefix = $(this).attr('id').replace('-set-price-btn', '');
        var priceValue = $('#' + prefix + '-set-price-input').val();
        
        if (priceValue && !isNaN(priceValue)) {
            // Set the unit price for all packages
            $('#' + prefix + '-unit-price').val(priceValue);
            
            // Show success message
            alert('تم ضبط السعر لجميع الباقات والشحن الفوري');
        } else {
            alert('الرجاء إدخال سعر صحيح');
        }
    });
    
    // Handle action buttons in the table
    $('#categoriesTable').on('click', '[data-action]', function (e) {
        e.preventDefault(); // Prevent default action
        const action = $(this).data('action');
        const row = $(this).closest('tr');
        
        switch (action) {
            case 'view':
                viewCategory(row);
                break;
            case 'edit':
                editCategory(row);
                break;
        }
    });
    
    // Function to view category
    function viewCategory(row) {
        // In a real application, you would fetch the data from the server
        // For now, we'll just show the modal
        console.log('Showing view modal');
        $('#viewCategoryModal').modal('show');
    }
    
    // Function to edit category
    function editCategory(row) {
        // In a real application, you would populate the form with data from the server
        // For now, we'll just show the modal
        console.log('Showing edit modal');
        $('#editCategoryModal').modal('show');
    }
});
$(document).ready(function () {
    // Handle filter toggle button - Use event delegation to ensure our handler runs
    $(document).off('click', '#toggleFilters').on('click', '#toggleFilters', function(e) {
        e.preventDefault();
        e.stopImmediatePropagation(); // Prevent other handlers from running
        console.log('South Spafone Filter toggle button clicked');
        
        var filterSection = $('#filterSection');
        var icon = $(this).find('i');
        var textSpan = $('#toggleFiltersText');
        
        console.log('Filter section is visible:', filterSection.is(':visible'));
        
        if (filterSection.is(':visible')) {
            // Hide the filter section
            filterSection.hide();
            icon.removeClass('ti-filter-off').addClass('ti-filter');
            textSpan.text('إظهار الفلترة');
            console.log('Hiding filter section');
        } else {
            // Show the filter section
            filterSection.show();
            icon.removeClass('ti-filter').addClass('ti-filter-off');
            textSpan.text('إخفاء الفلترة');
            console.log('Showing filter section');
        }
    });
    // Initialize DataTable with client-side processing (static data)
    var dt = $('#categoriesTable').DataTable({
        "processing": true,
        "serverSide": false, // Changed to client-side processing
        "data": [ // Static data
            [1, "الباقة الذهبية", "100"],
            [2, "الباقة الفضية", "50"],
            [3, "الباقة البرونزية", "25"]
        ],
        "columns": [
            { 
                "data": null, 
                "orderable": false, 
                "render": function (data, type, row) {
                    return '<input type="checkbox" class="row-checkbox" data-id="' + row[0] + '">';
                }
            },
            { "data": 0 }, // الرقم (Number)
            { "data": 1 }, // الفئة (Category)
            { "data": 2 }, // السعر (Price)
            { 
                "data": null, 
                "orderable": false, 
                "render": function (data, type, row) {
                    return '<div class="dropdown">' +
                        '<button class="btn btn-sm btn-outline-primary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">' +
                        'للمزيد' +
                        '</button>' +
                        '<ul class="dropdown-menu dropdown-menu-end">' +
                        '<li><a class="dropdown-item" href="#" data-action="edit"><i class="ti ti-pencil me-1"></i> تعديل</a></li>' +
                        '<li><a class="dropdown-item" href="#" data-action="view"><i class="ti ti-eye me-1"></i> مشاهدة</a></li>' +
                        '<li><a class="dropdown-item" href="#"><i class="ti ti-trash me-1"></i> حذف</a></li>' +
                        '</ul>' +
                        '</div>';
                }
            }
        ],
        "language": {
            "url": "https://cdn.datatables.net/plug-ins/1.13.8/i18n/ar.json"
        },
        "order": [[1, "asc"]],
        "pageLength": 30,
        "responsive": true,
        "dom": '<"row"<"col-sm-12 col-md-6"l><"col-sm-12 col-md-6"f>>' +
               '<"row"<"col-sm-12"tr>>' +
               '<"row"<"col-sm-12 col-md-5"i><"col-sm-12 col-md-7"p>>'
    });
    
    // Handle filter application
    $('#applyFilters').on('click', function () {
        // Get filter values
        var filterPackageName = $('#filter-package-name').val();
        var filterPrice = $('#filter-price').val();
        var filterRecords = $('#rowsCount').val();

        // Apply filters to DataTable
        // Column index 2 is the package name column (accounting for checkbox column)
        dt.column(2).search(filterPackageName ? filterPackageName : '').draw();
        // Column index 3 is the price column (accounting for checkbox column)
        dt.column(3).search(filterPrice ? filterPrice : '').draw();
        
        // Set page length based on records filter
        if (filterRecords) {
            dt.page.len(filterRecords).draw();
        }
    });
    
    // Handle print button
    $('#printButton').on('click', function () {
        window.print();
    });
    
    // Handle export to Excel button
    $('#exportExcelButton').on('click', function () {
        alert('تصدير إلى Excel');
        // In a real application, you would implement Excel export functionality here
    });
    
    // Handle filter toggle button
    $('#toggleFilters').on('click', function() {
        var filterSection = $('#filterSection');
        var icon = $(this).find('i');
        var textSpan = $('#toggleFiltersText');
        
        if (filterSection.is(':visible')) {
            // Hide the filter section
            filterSection.hide();
            icon.removeClass('ti-filter-off').addClass('ti-filter');
            textSpan.text('إظهار الفلترة');
        } else {
            // Show the filter section
            filterSection.show();
            icon.removeClass('ti-filter').addClass('ti-filter-off');
            textSpan.text('إخفاء الفلترة');
        }
    });
    
    // Initialize bootstrap-select for category selection with enhanced options
    function initializeSelectPicker() {
        $('.selectpicker').selectpicker({
            style: 'btn-light',
            liveSearch: true,
            liveSearchPlaceholder: 'ابحث...',
            noneSelectedText: 'لم يتم تحديد أي شيء',
            noneResultsText: 'لا توجد نتائج لـ {0}',
            selectAllText: 'تحديد الكل',
            deselectAllText: 'إلغاء تحديد الكل',
            dropupAuto: false,   // منع السلوك التلقائي
            width: '100%',
            container: 'body'    // إخراج القائمة خارج أي كارد/مودال
        });
    }
    
    // Initialize selectpickers when document is ready
    initializeSelectPicker();
    
    // Re-initialize bootstrap-select when modals are shown or hidden
    $('.modal').on('shown.bs.modal hidden.bs.modal', function () {
        $('.selectpicker').selectpicker('refresh');
    });

    // Handle reset filters button
    $('#resetFilters').on('click', function() {
        // Reset all filter input fields
        $('#filter-package-name').val('');
        $('#filter-price').val('');
        $('#rowsCount').selectpicker('val', '30');
        
        // Refresh the selectpickers to show the placeholders
        $('#rowsCount').selectpicker('refresh');
        
        // Reset DataTable page length to default (30 as requested)
        dt.page.len(30).draw();
        
        // Clear DataTable filters
        dt.search('').columns().search('').draw();
        
        alert('تم إعادة تعيين الفلاتر');
    });
    
    // Handle set price button functionality
    $(document).on('click', '[id$="-set-price-btn"]', function() {
        var prefix = $(this).attr('id').replace('-set-price-btn', '');
        var priceValue = $('#' + prefix + '-set-price-input').val();
        
        if (priceValue && !isNaN(priceValue)) {
            // Set the unit price for all packages
            $('#' + prefix + '-unit-price').val(priceValue);
            
            // Show success message
            alert('تم ضبط السعر لجميع الباقات والشحن الفوري');
        } else {
            alert('الرجاء إدخال سعر صحيح');
        }
    });
    
    // Initialize top action buttons as disabled
    $('#topEditButton, #topViewButton').addClass('disabled');
    
    // Handle form submissions with AJAX
    $('#addCategoryForm, #editCategoryForm').on('submit', function (e) {
        e.preventDefault();
        
        const form = $(this);
        const formId = form.attr('id');
        const prefix = formId === 'addCategoryForm' ? 'add' : 'edit';
        
        // Get form data
        const formData = getFormData(prefix);
        
        // Validate form
        if (!validateForm(formData, prefix)) {
            return;
        }
        
        // Submit form via AJAX
        submitFormViaAjax(formData, prefix);
    });
    
    // Handle save button click in modal footer
    $('#addCategoryModal .modal-footer .btn-primary, #editCategoryModal .modal-footer .btn-primary').on('click', function () {
        const modal = $(this).closest('.modal');
        const form = modal.find('form');
        const formId = form.attr('id');
        const prefix = formId === 'addCategoryForm' ? 'add' : 'edit';
        
        // Get form data
        const formData = getFormData(prefix);
        
        // Validate form
        if (!validateForm(formData, prefix)) {
            return;
        }
        
        // Submit form via AJAX
        submitFormViaAjax(formData, prefix);
    });
    
    // Handle edit from view button
    $('#editFromViewBtn').on('click', function () {
        // Close view modal
        $('#viewCategoryModal').modal('hide');
        
        // Open edit modal (in a real app, you would populate it with data first)
        $('#editCategoryModal').modal('show');
    });
    
    // Handle action buttons in the table
    $('#categoriesTable').on('click', '[data-action]', function (e) {
        e.preventDefault(); // Prevent default action
        const action = $(this).data('action');
        const row = $(this).closest('tr');
        
        switch (action) {
            case 'view':
                viewCategory(row);
                break;
            case 'edit':
                editCategory(row);
                break;
        }
    });
    
    // Handle select all columns button
    $('#selectAllColumns').on('click', function () {
        const allChecked = $('#selectAllCheckbox').prop('checked');
        $('.row-checkbox').prop('checked', !allChecked);
        $('#selectAllCheckbox').prop('checked', !allChecked);
        // Enable/disable top action buttons based on selection
        toggleTopActionButtons();
    });
    
    // Handle individual row checkbox changes
    $('#categoriesTable tbody').on('change', '.row-checkbox', function () {
        // Enable/disable top action buttons based on selection
        toggleTopActionButtons();
    });
    
    // Function to enable/disable top action buttons based on row selection
    function toggleTopActionButtons() {
        const selectedRows = $('.row-checkbox:checked').length;
        if (selectedRows === 1) {
            $('#topEditButton, #topViewButton').removeClass('disabled');
        } else if (selectedRows === 0) {
            $('#topEditButton, #topViewButton').addClass('disabled');
        } else {
            // Multiple rows selected - only allow view in this example
            $('#topEditButton').addClass('disabled');
            $('#topViewButton').removeClass('disabled');
        }
    }
    
    // Handle top edit button click
    $('#topEditButton').on('click', function (e) {
        e.preventDefault();
        const selectedRows = $('.row-checkbox:checked');
        if (selectedRows.length === 1) {
            // Get the row data
            const row = selectedRows.closest('tr');
            editCategory(row);
        } else {
            alert('الرجاء تحديد صف واحد للتعديل');
        }
    });
    
    // Handle top view button click
    $('#topViewButton').on('click', function (e) {
        e.preventDefault();
        const selectedRows = $('.row-checkbox:checked');
        if (selectedRows.length >= 1) {
            // Get the first selected row data
            const row = selectedRows.first().closest('tr');
            viewCategory(row);
        } else {
            alert('الرجاء تحديد صف واحد على الأقل للمشاهدة');
        }
    });
    
    // Function to view category
    function viewCategory(row) {
        // In a real application, you would fetch the data from the server
        // For now, we'll just show the modal
        console.log('Showing view modal');
        $('#viewCategoryModal').modal('show');
    }
    
    // Function to edit category
    function editCategory(row) {
        // In a real application, you would populate the form with data from the server
        // For now, we'll just show the modal
        console.log('Showing edit modal');
        $('#editCategoryModal').modal('show');
    }
    
    // Function to get form data
    function getFormData(prefix) {
        const data = {
            packageName: $(`#${prefix}-package-name`).val(),
            price: $(`#${prefix}-price`).val(),
            bindingAmount6: $(`#${prefix}-binding-amount6`).val(),
            convertToRobot: $(`#${prefix}-convert-to-robot`).val(),
            quantity: $(`#${prefix}-quantity`).val(),
            unitPrice: $(`#${prefix}-unit-price`).val()
        };
        
        return data;
    }
    
    // Function to validate form
    function validateForm(data, prefix) {
        let isValid = true;
        
        // Clear previous validation states
        $('.is-invalid').removeClass('is-invalid');
        $('.invalid-feedback').remove();
        
        // Validate required fields
        if (!data.packageName) {
            $(`#${prefix}-package-name`).addClass('is-invalid');
            $(`#${prefix}-package-name`).after('<div class="invalid-feedback">الرجاء إدخال الفئة</div>');
            isValid = false;
        }
        
        if (!data.price) {
            $(`#${prefix}-price`).addClass('is-invalid');
            $(`#${prefix}-price`).after('<div class="invalid-feedback">الرجاء إدخال السعر</div>');
            isValid = false;
        }
        
        if (!data.bindingAmount6) {
            $(`#${prefix}-binding-amount6`).addClass('is-invalid');
            $(`#${prefix}-binding-amount6`).after('<div class="invalid-feedback">الرجاء إدخال مبلغ الربط6</div>');
            isValid = false;
        }
        
        if (!data.quantity) {
            $(`#${prefix}-quantity`).addClass('is-invalid');
            $(`#${prefix}-quantity`).after('<div class="invalid-feedback">الرجاء إدخال الكمية</div>');
            isValid = false;
        }
        
        if (!data.unitPrice) {
            $(`#${prefix}-unit-price`).addClass('is-invalid');
            $(`#${prefix}-unit-price`).after('<div class="invalid-feedback">الرجاء إدخال سعر الوحدة</div>');
            isValid = false;
        }
        
        return isValid;
    }
    
    // Function to submit form via AJAX
    function submitFormViaAjax(data, prefix) {
        // Show loading indicator
        const submitBtn = $(`#${prefix}CategoryModal .modal-footer .btn-primary`);
        const originalText = submitBtn.html();
        submitBtn.html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> جاري الحفظ...');
        submitBtn.prop('disabled', true);
        
        // In a real application, you would send the data to the server
        // For now, we'll simulate an AJAX call
        setTimeout(function () {
            // Reset button
            submitBtn.html(originalText);
            submitBtn.prop('disabled', false);
            
            // Close modal
            $(`#${prefix}CategoryModal`).modal('hide');
            
            // Show success message
            alert('تم حفظ البيانات بنجاح');
            
            // Reload the DataTable
            dt.ajax.reload();
        }, 1500);
    }
    
    // Initialize tooltips
    $('[data-bs-toggle="tooltip"]').tooltip();
});
// System Connections Page JavaScript

// Initialize the page when DOM is ready
document.addEventListener('DOMContentLoaded', function() {
    // Bind event handlers
    bindEventHandlers();
    
    // Initialize toast notifications
    initializeToasts();
});

// Initialize toast notifications
function initializeToasts() {
    // Toast container already exists in HTML
}

// Show toast notification
function showToast(message, type = 'info') {
    const toastContainer = document.querySelector('.toast-container') || createToastContainer();
    
    const toast = document.createElement('div');
    toast.className = `toast ${type} show`;
    
    let icon = 'ℹ️';
    if (type === 'success') icon = '✅';
    else if (type === 'error') icon = '❌';
    else if (type === 'warning') icon = '⚠️';
    
    toast.innerHTML = `
        <div class="toast-icon">${icon}</div>
        <div class="toast-message">${message}</div>
        <button class="toast-close">&times;</button>
    `;
    
    toastContainer.appendChild(toast);
    
    // Add close functionality
    const closeBtn = toast.querySelector('.toast-close');
    closeBtn.addEventListener('click', function() {
        toast.remove();
    });
    
    // Auto hide after 5 seconds
    setTimeout(() => {
        if (toast.parentNode) {
            toast.remove();
        }
    }, 5000);
}

// Create toast container if it doesn't exist
function createToastContainer() {
    const container = document.createElement('div');
    container.className = 'toast-container';
    document.body.appendChild(container);
    return container;
}

// Show loader
function showLoader() {
    let loader = document.getElementById('loader');
    if (!loader) {
        loader = document.createElement('div');
        loader.id = 'loader';
        loader.className = 'loader-overlay';
        loader.innerHTML = `
            <div>
                <div class="loader-spinner"></div>
                <div class="loader-text">جارٍ البحث...</div>
            </div>
        `;
        document.body.appendChild(loader);
    }
    loader.style.display = 'flex';
}

// Hide loader
function hideLoader() {
    const loader = document.getElementById('loader');
    if (loader) {
        loader.style.display = 'none';
    }
}

// Open unified modal
function openUnifiedModal(tabType) {
    // Show the unified modal
    const modal = new bootstrap.Modal(document.getElementById('unifiedModal'));
    modal.show();
}

// Bind all event handlers
function bindEventHandlers() {
    // Handle filter toggle button
    $('#toggleFilters').on('click', function() {
        var filterSection = $('#filterSection');
        var icon = $(this).find('i');
        var textSpan = $('#toggleFiltersText');
        
        if (filterSection.is(':visible')) {
            // Hide the filter section
            filterSection.hide();
            icon.removeClass('ti-filter-off').addClass('ti-filter');
            textSpan.text('إظهار الفلترة');
        } else {
            // Show the filter section
            filterSection.show();
            icon.removeClass('ti-filter').addClass('ti-filter-off');
            textSpan.text('إخفاء الفلترة');
        }
    });
    
    // Reset filters
    $('#resetFilters').click(function() {
        $('#filter-provider-name, #filter-network, #filter-employees, #filter-account-sources').val('');
        $('#filter-direction').selectpicker('val', '');
        $('.selectpicker').selectpicker('refresh');
        showToast('تم إعادة تعيين الفلاتر', 'info');
    });
    
    // Apply filters with real AJAX
    $('#searchButton').click(function() {
        const filters = {
            providerName: $('#filter-provider-name').val(),
            network: $('#filter-network').val(),
            employees: $('#filter-employees').val(),
            accountSources: $('#filter-account-sources').val(),
            direction: $('#filter-direction').val()
        };
        
        // Show loader during AJAX request
        showLoader();
        
        // In a real implementation, you would update the DataTable with new search parameters
        // For now, we'll just show a success message
        setTimeout(() => {
            hideLoader();
            showToast('تم البحث بنجاح', 'success');
        }, 1500);
    });
    
    // Refresh button
    $('#refreshBtn').click(function() {
        showLoader();
        // Reload the DataTable
        $('#providersTable').DataTable().ajax.reload();
        setTimeout(() => {
            hideLoader();
            showToast('تم تحديث الصفحة', 'success');
        }, 1000);
    });
    
    // Select all checkboxes
    $('#selectAll').click(function() {
        $('.provider-checkbox').prop('checked', this.checked);
    });
    
    // Select all button
    $('#selectAllBtn').click(function() {
        var isChecked = $('#selectAll').prop('checked');
        $('#selectAll').prop('checked', !isChecked).trigger('click');
        showToast('تم تحديد/إلغاء تحديد الكل', 'info');
    });
    
    // Delete multiple button
    $('#deleteMultipleBtn').click(function() {
        var selected = $('.provider-checkbox:checked');
        if (selected.length > 0) {
            Swal.fire({
                title: 'تأكيد الحذف',
                text: 'هل أنت متأكد من حذف ' + selected.length + ' مزود/مزودين؟',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'نعم، احذف',
                cancelButtonText: 'إلغاء'
            }).then((result) => {
                if (result.isConfirmed) {
                    showLoader();
                    // Simulate AJAX delete
                    setTimeout(() => {
                        hideLoader();
                        // Reload the DataTable after delete
                        $('#providersTable').DataTable().ajax.reload();
                        showToast('تم حذف ' + selected.length + ' مزود/مزودين', 'success');
                    }, 1500);
                }
            });
        } else {
            showToast('يرجى تحديد مزود واحد على الأقل للحذف', 'warning');
        }
    });
    
    // Add multiple button
    $('#addMultipleBtn').click(function() {
        showLoader();
        // Simulate AJAX add
        setTimeout(() => {
            hideLoader();
            // Reload the DataTable after add
            $('#providersTable').DataTable().ajax.reload();
            showToast('تم تنفيذ الإضافة المتعددة', 'success');
        }, 1500);
    });
    
    // Update multiple button
    $('#updateMultipleBtn').click(function() {
        var selected = $('.provider-checkbox:checked');
        if (selected.length > 0) {
            showLoader();
            // Simulate AJAX update
            setTimeout(() => {
                hideLoader();
                // Reload the DataTable after update
                $('#providersTable').DataTable().ajax.reload();
                showToast('تم تحديث ' + selected.length + ' مزود/مزودين', 'success');
            }, 1500);
        } else {
            showToast('يرجى تحديد مزود واحد على الأقل للتحديث', 'warning');
        }
    });
    
    // Preview multiple button
    $('#previewMultipleBtn').click(function() {
        var selected = $('.provider-checkbox:checked');
        if (selected.length > 0) {
            showLoader();
            // Simulate AJAX preview
            setTimeout(() => {
                hideLoader();
                showToast('تنفيذ معاينة ' + selected.length + ' مزود/مزودين', 'info');
            }, 1500);
        } else {
            showToast('يرجى تحديد مزود واحد على الأقل للمعاينة', 'warning');
        }
    });
    
    // Handle save button for unified modal
    $('#saveUnifiedBtn').on('click', function() {
        // Handle unified form submission
        handleUnifiedForm();
    });
    
    // Auto-sort table when queue number inputs change
    $(document).on('change', 'tbody input[type="number"]', function() {
        var $input = $(this);
        var columnIndex = $input.closest('td').index();
        
        // Check if this is the queue number column (index 1)
        if (columnIndex === 1) {
            sortTableByQueueNumber();
        }
    });
}

// Handle unified form submission
function handleUnifiedForm() {
    // Get form data
    const formData = {
        name: $('#providerName').val(),
        url: $('input[name="url"]').val(),
        ip: $('input[name="ip"]').val(),
        cid: $('input[name="cid"]').val(),
        username: $('input[name="username"]').val(),
        password: $('input[name="password"]').val(),
        token: $('input[name="token"]').val(),
        employee: $('select[name="employee"]').val(),
        accountSource: $('select[name="accountSource"]').val(),
        isrun: $('input[name="isrun"]').val(),
        type: $('input[name="type"]').val(),
        region: $('input[name="region"]:checked').val(),
        mobile: $('input[name="mobile"]').val(),
        cidsnote: $('input[name="cidsnote"]').val(),
        minamtobill: $('input[name="minamtobill"]').val(),
        maxamtobill: $('input[name="maxamtobill"]').val(),
        "pcuts": $('input[name="pcuts"]').val(),
        stopfprice: $('input[name="stopfprice"]').val(),
        systemName: $('#systemName').val(),
        connectionStatus: $('#connectionStatus').val(),
        providerType: $('#providerType').val(),
        balance: $('#balance').val(),
        direction: $('#direction').val(),
        responseTime: $('#responseTime').val(),
        supportedNetworks: $('#supportedNetworks').val(),
        accountSources: $('#accountSourcesText').val(),
        employees: $('#employeesText').val(),
        // Network section data
        ...getSelectedNetworks()
    };
    
    // Basic validation
    if (!formData.name || !formData.url || !formData.ip) {
        showToast('يرجى ملء الحقول المطلوبة', 'warning');
        return;
    }
    
    // Show loader
    showLoader();
    
    // Simulate AJAX request
    setTimeout(() => {
        hideLoader();
        $('#unifiedModal').modal('hide');
        showToast('تم حفظ الإعدادات بنجاح!', 'success');
        // Reset form
        $('#unifiedForm')[0].reset();
    }, 1500);
}

// Function to sort table by queue number
function sortTableByQueueNumber() {
    var $tbody = $('tbody');
    var $rows = $tbody.find('tr').toArray();
    
    // Sort rows based on queue number values
    $rows.sort(function(a, b) {
        var queueA = parseInt($(a).find('td:eq(1) input').val()) || 0;
        var queueB = parseInt($(b).find('td:eq(1) input').val()) || 0;
        return queueA - queueB;
    });
    
    // Re-append sorted rows to tbody
    $.each($rows, function(index, row) {
        $tbody.append(row);
    });
    
    // Update row styling after sorting
    updateRowStyling();
}

// Function to update row styling after sorting
function updateRowStyling() {
    $('tbody tr').each(function(index) {
        // Alternate row colors
        if (index % 2 === 0) {
            $(this).css('background-color', '#f9fafb');
        } else {
            $(this).css('background-color', '#ffffff');
        }
    });
}

// Generic handler for all provider actions
function handleProviderAction(id, actionType) {
    showLoader();
    
    switch(actionType) {
        case 'run':
            runWakeel(id, true);
            break;
        case 'stop':
            runWakeel(id, false);
            break;
        case 'balance':
            getBalance(id);
            break;
        case 'credit':
            addCredit(id);
            break;
        case 'pending':
            viewPending(id);
            break;
        case 'operations':
            viewOperations(id);
            break;
        case 'daily':
            viewDaily(id);
            break;
        case 'notifications':
            viewNotifications(id);
            break;
        case 'insurance':
            openInsurance(id);
            break;
        case 'account-balance':
            viewAccountBalance(id);
            break;
        case 'alerts':
            configureAlerts(id);
            break;
        case 'suspension':
            configureSuspension(id);
            break;
        case 'networks':
            showAllNetworks(id);
            break;
        case 'match':
            matchliprov(id);
            break;
        case 'notes':
            browsmynotes(id);
            break;
        case 'reports':
            browsopitems(id);
            break;
        default:
            console.warn('Action not found: ' + actionType);
            hideLoader();
            showToast('إجراء غير مدعوم', 'error');
    }
}

// تشغيل أو إيقاف مزود معين
function runWakeel(id, status) {
    // Simulate AJAX request
    setTimeout(() => {
        hideLoader();
        // Reload the DataTable after status change
        $('#providersTable').DataTable().ajax.reload();
        showToast('تغيير حالة المزود ' + id + ' إلى ' + (status ? 'مفعل' : 'غير مفعل'), 'info');
    }, 1000);
}

// استعلام عن رصيد المزود الحالي
function getBalance(id) {
    // Simulate AJAX request
    fetch(`/SystemConnection/GetBalance/${id}`)
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            Swal.fire({
                title: 'رصيد المزود',
                text: data.balance + ' ريال',
                icon: 'info',
                confirmButtonText: 'موافق'
            });
        })
        .catch(error => {
            console.error('Error:', error);
            showToast('فشل في جلب الرصيد', 'error');
        })
        .finally(() => {
            hideLoader();
        });
}

// تفعيل أو إلغاء تفعيل شبكة معينة للمزود
function runmnet(element) {
    var providerId = $(element).data('provider-id');
    var network = $(element).data('network');
    var isChecked = $(element).is(':checked');
    
    showLoader();
    setTimeout(() => {
        hideLoader();
        // Reload the DataTable after network change
        $('#providersTable').DataTable().ajax.reload();
        showToast('تغيير حالة الشبكة ' + network + ' للمزود ' + providerId + ' إلى ' + (isChecked ? 'مفعل' : 'غير مفعل'), 'info');
    }, 1000);
}

// مطابقة العمليات المالية للمزود
function matchliprov(id) {
    showLoader();
    setTimeout(() => {
        hideLoader();
        showToast('مطابقة العمليات المالية للمزود ' + id, 'info');
    }, 1500);
}

// عرض الإشعارات المتعلقة بالمزود
function browsmynotes(id) {
    showLoader();
    setTimeout(() => {
        hideLoader();
        showToast('عرض الإشعارات للمزود ' + id, 'info');
    }, 1000);
}

// عرض عمليات المزود
function browsopitems(id) {
    showLoader();
    setTimeout(() => {
        hideLoader();
        showToast('عرض التقارير للمزود ' + id, 'info');
    }, 1000);
}

// إعدادات التنبيه
function configureAlerts(id) {
    showLoader();
    setTimeout(() => {
        hideLoader();
        showToast('ضبط إعدادات التنبيه للمزود ' + id, 'info');
    }, 1000);
}

// إعدادات الإيقاف
function configureSuspension(id) {
    showLoader();
    setTimeout(() => {
        hideLoader();
        showToast('ضبط إعدادات الإيقاف للمزود ' + id, 'info');
    }, 1000);
}

// عرض جميع الشبكات
function showAllNetworks(id) {
    showLoader();
    setTimeout(() => {
        hideLoader();
        showToast('عرض جميع الشبكات للمزود ' + id, 'info');
    }, 1000);
}

// إضافة رصيد
function addCredit(id) {
    showLoader();
    setTimeout(() => {
        hideLoader();
        // Reload the DataTable after adding credit
        $('#providersTable').DataTable().ajax.reload();
        showToast('إضافة رصيد للمزود ' + id, 'info');
    }, 1000);
}

// عرض العمليات المعلقة
function viewPending(id) {
    showLoader();
    setTimeout(() => {
        hideLoader();
        showToast('عرض العمليات المعلقة للمزود ' + id, 'info');
    }, 1000);
}

// عرض العمليات
function viewOperations(id) {
    showLoader();
    setTimeout(() => {
        hideLoader();
        showToast('عرض العمليات للمزود ' + id, 'info');
    }, 1000);
}

// عرض التقارير اليومية
function viewDaily(id) {
    showLoader();
    setTimeout(() => {
        hideLoader();
        showToast('عرض التقارير اليومية للمزود ' + id, 'info');
    }, 1000);
}

// عرض الإشعارات
function viewNotifications(id) {
    showLoader();
    setTimeout(() => {
        hideLoader();
        showToast('عرض الإشعارات للمزود ' + id, 'info');
    }, 1000);
}

// فتح التأمينات
function openInsurance(id) {
    showLoader();
    setTimeout(() => {
        hideLoader();
        showToast('فتح التأمينات للمزود ' + id, 'info');
    }, 1000);
}

// عرض رصيد الحساب
function viewAccountBalance(id) {
    showLoader();
    setTimeout(() => {
        hideLoader();
        showToast('عرض رصيد الحساب للمزود ' + id, 'info');
    }, 1000);
}

// Function to show/hide detailed package options
function slminfo(elementId) {
    var element = $(elementId);
    if (element.is(':visible')) {
        element.hide();
    } else {
        element.show();
    }
}

// Helper function to get selected network data
function getSelectedNetworks() {
    return {
        networks: $('input[name="networks"]:checked').map(function() { return this.value; }).get(),
        mtnofferss: $('input[name="mtnofferss[]"]:checked').map(function() { return this.value; }).get(),
        srafahns: $('input[name="srafahns[]"]:checked').map(function() { return this.value; }).get()
    };
}

// Helper function to set network checkboxes based on saved data
function setNetworkCheckboxes(networkData) {
    // Clear all checkboxes first
    $('input[name="networks"]').prop('checked', false);
    $('input[name="mtnofferss[]"]').prop('checked', false);
    $('input[name="srafahns[]"]').prop('checked', false);
    
    // Set checkboxes based on network data
    if (networkData.networks) {
        networkData.networks.forEach(function(value) {
            $('input[name="networks"][value="' + value + '"]').prop('checked', true);
        });
    }
    
    if (networkData.mtnofferss) {
        networkData.mtnofferss.forEach(function(value) {
            $('input[name="mtnofferss[]"][value="' + value + '"]').prop('checked', true);
        });
    }
    
    if (networkData.srafahns) {
        networkData.srafahns.forEach(function(value) {
            $('input[name="srafahns[]"][value="' + value + '"]').prop('checked', true);
        });
    }
}
// UI Polish JavaScript functions

// Function to show/hide detailed package options
function slminfo(elementId) {
    var element = $(elementId);
    if (element.is(':visible')) {
        element.hide();
    } else {
        element.show();
    }
}

// Initialize components when DOM is ready
document.addEventListener('DOMContentLoaded', function() {
    // Initialize bootstrap select if available
    if ($('.selectpicker').length > 0) {
        $('.selectpicker').selectpicker();
    }
});
// Voucher Modal JavaScript functions

// Function to initialize voucher modals
function initializeVoucherModals() {
    // Initialize bootstrap select if available
    if ($('.selectpicker').length > 0) {
        $('.selectpicker').selectpicker();
    }
    
    // Handle modal close buttons
    $('.modal .btn-close').on('click', function() {
        const modalElement = $(this).closest('.modal')[0];
        const modal = bootstrap.Modal.getInstance(modalElement) || new bootstrap.Modal(modalElement);
        modal.hide();
    });
    
    // Handle modal backdrop click to close
    $('.modal').on('click', function(e) {
        if (e.target === this) {
            const modal = bootstrap.Modal.getInstance(this) || new bootstrap.Modal(this);
            modal.hide();
        }
    });
}

// Function to show a specific modal
function showVoucherModal(modalId) {
    const modalElement = document.querySelector(modalId);
    if (modalElement) {
        const modal = new bootstrap.Modal(modalElement);
        modal.show();
        
        // Initialize selectpickers within the modal
        $(modalId).find('.selectpicker').selectpicker();
    }
}

// Function to hide a specific modal
function hideVoucherModal(modalId) {
    const modalElement = document.querySelector(modalId);
    if (modalElement) {
        const modal = bootstrap.Modal.getInstance(modalElement) || new bootstrap.Modal(modalElement);
        modal.hide();
    }
}

// Initialize components when DOM is ready
document.addEventListener('DOMContentLoaded', function() {
    initializeVoucherModals();
});
$(function () {
    // Variable to track the currently selected row
    let selectedRow = null;
    
    // Initialize DataTable
    const dt = $("#categoriesTable").DataTable({
        paging: true,
        lengthChange: false,
        searching: false,
        ordering: true,
        info: true,
        autoWidth: false,
        responsive: true,
        // Add buttons extension
        dom: 'Bfrtip',
        buttons: [
            {
                extend: 'print',
                text: 'طباعه',
                className: 'btn btn-outline-secondary btn-sm',
                exportOptions: {
                    columns: ':visible'
                }
            },
            {
                extend: 'colvis',
                text: 'تحديد الحقول',
                className: 'btn btn-outline-secondary btn-sm',
                collectionLayout: 'fixed two-column'
            },
            {
                extend: 'excelHtml5',
                text: 'تصدير اكسل',
                className: 'btn btn-outline-secondary btn-sm',
                exportOptions: {
                    columns: ':visible'
                }
            }
        ],
        language: {
            emptyTable: "لا توجد بيانات",
            info: "إظهار _START_ إلى _END_ من _TOTAL_ سجل",
            infoEmpty: "إظهار 0 إلى 0 من 0",
            paginate: { first:"الأولى", last:"الأخيرة", next:"التالي", previous:"السابق" },
            buttons: {
                colvis: 'تحديد الحقول',
                print: 'طباعه',
                excel: 'تصدير اكسل'
            }
        }
    });
    
    // Move buttons to filter section
    dt.buttons().container().appendTo('#datatables-buttons-container');
    
    // Hide the default buttons container since we're using custom buttons
    $('.dt-buttons').hide();
    
    // Reinitialize buttons when filter section is shown
    $('#toggleFilters').on('click', function() {
        setTimeout(function() {
            // Refresh button styles when filter section is toggled
            $('.dt-buttons .btn').addClass('btn-sm');
        }, 100);
    });
    
    // Ensure buttons are properly styled after initialization
    setTimeout(function() {
        $('.dt-buttons .btn').addClass('btn-sm');
    }, 500);
    
    // Handle filter toggle button
    $('#toggleFilters').on('click', function() {
        var filterSection = $('#filterSection');
        var icon = $(this).find('i');
        var textSpan = $('#toggleFiltersText');
        
        if (filterSection.is(':visible')) {
            // Hide the filter section
            filterSection.hide();
            icon.removeClass('ti-filter-off').addClass('ti-filter');
            textSpan.text('إظهار الفلترة');
        } else {
            // Show the filter section
            filterSection.show();
            icon.removeClass('ti-filter').addClass('ti-filter-off');
            textSpan.text('إخفاء الفلترة');
        }
    });
    
    // Initialize bootstrap-select for category selection with enhanced options
    function initializeSelectPicker() {
        $('.selectpicker').selectpicker({
            style: 'btn-light',
            liveSearch: true,
            liveSearchPlaceholder: 'ابحث...',
            noneSelectedText: 'لم يتم تحديد أي شيء',
            noneResultsText: 'لا توجد نتائج لـ {0}',
            selectAllText: 'تحديد الكل',
            deselectAllText: 'إلغاء تحديد الكل',
            dropupAuto: false,   // منع السلوك التلقائي
            width: '100%',
            container: 'body'    // إخراج القائمة خارج أي كارد/مودال
        });
    }
    
    // Initialize selectpickers when document is ready
    initializeSelectPicker();
    
    // Re-initialize bootstrap-select when modals are shown or hidden
    $('.modal').on('shown.bs.modal hidden.bs.modal', function () {
        $('.selectpicker').selectpicker('refresh');
    });

    // Handle reset filters button
    $('#resetFilters').on('click', function() {
        // Reset all filter input fields
        $('#filter-id').val('');
        $('#filter-package-name').val('');
        $('#filter-price').val('');
        $('#filter-internet').val('');
        $('#filter-messages').val('');
        $('#filter-calls').val('');
        $('#filter-unit-price').val('');
        $('#filter-quantity').val('');
        $('#filter-unique-number').val('');
        $('#filter-year').selectpicker('val', '');
        $('#filter-records').selectpicker('val', '');
        $('.selectpicker').selectpicker('refresh');
        alert('تم إعادة تعيين الفلاتر');
    });
    
    // Handle row selection
    $('#categoriesTable tbody').on('click', 'tr', function(e) {
        // Prevent row selection when clicking on action buttons or dropdowns
        if ($(e.target).closest('.dropdown-toggle, .dropdown-menu, .btn').length) {
            return;
        }
        
        // Toggle selection
        if ($(this).hasClass('selected')) {
            $(this).removeClass('selected');
            selectedRow = null;
        } else {
            // Remove selection from other rows
            $('#categoriesTable tbody tr.selected').removeClass('selected');
            $(this).addClass('selected');
            selectedRow = $(this);
        }
        
        // Enable/disable top action buttons based on selection
        if (selectedRow) {
            $('#topEditButton, #topViewButton').removeClass('disabled');
        } else {
            $('#topEditButton, #topViewButton').addClass('disabled');
        }
    });
    
    // Handle select all checkbox
    $('#selectAll').on('change', function() {
        const isChecked = $(this).is(':checked');
        $('.category-checkbox').prop('checked', isChecked);
        
        // If all rows are selected, enable top action buttons
        if (isChecked) {
            $('#topEditButton, #topViewButton').removeClass('disabled');
        } else {
            $('#topEditButton, #topViewButton').addClass('disabled');
            selectedRow = null;
        }
    });
    
    // Handle individual checkbox selection
    $('#categoriesTable tbody').on('change', '.category-checkbox', function() {
        // If any checkbox is checked, enable top action buttons
        if ($('.category-checkbox:checked').length > 0) {
            $('#topEditButton, #topViewButton').removeClass('disabled');
        } else {
            $('#topEditButton, #topViewButton').addClass('disabled');
            selectedRow = null;
        }
    });
    
    // Handle top action buttons
    $('#topEditButton').on('click', function(e) {
        e.preventDefault();
        if (selectedRow) {
            editPackage(selectedRow);
        } else {
            alert('الرجاء تحديد صف أولاً');
        }
    });
    
    $('#topViewButton').on('click', function(e) {
        e.preventDefault();
        if (selectedRow) {
            viewPackage(selectedRow);
        } else {
            alert('الرجاء تحديد صف أولاً');
        }
    });
    
    // Handle action buttons in the table
    $('#categoriesTable').on('click', '[data-action]', function (e) {
        e.preventDefault(); // Prevent default action
        const action = $(this).data('action');
        const row = $(this).closest('tr');
        
        switch (action) {
            case 'view':
                viewPackage(row);
                break;
            case 'edit':
                editPackage(row);
                break;
        }
    });
    
    // Function to view package
    function viewPackage(row) {
        // In a real application, you would fetch the data from the server
        // For now, we'll just show the modal
        console.log('Showing view modal');
        $('#viewPackageModal').modal('show');
    }
    
    // Function to edit package
    function editPackage(row) {
        // In a real application, you would populate the form with data from the server
        // For now, we'll just show the modal
        console.log('Showing edit modal');
        $('#editPackageModal').modal('show');
    }
    
    // Handle form submissions with AJAX
    $('#addPackageForm, #editPackageForm').on('submit', function (e) {
        e.preventDefault();
        
        const form = $(this);
        const formId = form.attr('id');
        const prefix = formId === 'addPackageForm' ? 'add' : 'edit';
        
        // Get form data
        const formData = getFormData(prefix);
        
        // Validate form
        if (!validateForm(formData, prefix)) {
            return;
        }
        
        // Submit form via AJAX
        submitFormViaAjax(formData, prefix);
    });
    
    // Handle save button click in modal footer
    $('#addPackageModal .modal-footer .btn-primary, #editPackageModal .modal-footer .btn-primary').on('click', function () {
        const modal = $(this).closest('.modal');
        const form = modal.find('form');
        const formId = form.attr('id');
        const prefix = formId === 'addPackageForm' ? 'add' : 'edit';
        
        // Get form data
        const formData = getFormData(prefix);
        
        // Validate form
        if (!validateForm(formData, prefix)) {
            return;
        }
        
        // Submit form via AJAX
        submitFormViaAjax(formData, prefix);
    });
    
    // Function to get form data
    function getFormData(prefix) {
        const data = {
            packageName: $(`#${prefix}-package-name`).val(),
            price: $(`#${prefix}-price`).val(),
            uniquePackageCode: $(`#${prefix}-unique-package-code`).val(),
            quantity: $(`#${prefix}-quantity`).val(),
            unitPrice: $(`#${prefix}-unit-price`).val(),
            messages: $(`#${prefix}-messages`).val(),
            calls: $(`#${prefix}-calls`).val(),
            internet: $(`#${prefix}-internet`).val()
        };
        
        return data;
    }
    
    // Function to validate form
    function validateForm(data, prefix) {
        let isValid = true;
        
        // Clear previous validation states
        $('.is-invalid').removeClass('is-invalid');
        $('.invalid-feedback').remove();
        
        // Validate required fields
        if (!data.packageName) {
            $(`#${prefix}-package-name`).addClass('is-invalid');
            $(`#${prefix}-package-name`).after('<div class="invalid-feedback">الرجاء إدخال اسم الباقة</div>');
            isValid = false;
        }
        
        if (!data.price) {
            $(`#${prefix}-price`).addClass('is-invalid');
            $(`#${prefix}-price`).after('<div class="invalid-feedback">الرجاء إدخال السعر</div>');
            isValid = false;
        }
        
        if (!data.uniquePackageCode) {
            $(`#${prefix}-unique-package-code`).addClass('is-invalid');
            $(`#${prefix}-unique-package-code`).after('<div class="invalid-feedback">الرجاء إدخال كود الباقة الموحد</div>');
            isValid = false;
        }
        
        if (!data.quantity) {
            $(`#${prefix}-quantity`).addClass('is-invalid');
            $(`#${prefix}-quantity`).after('<div class="invalid-feedback">الرجاء إدخال الكمية</div>');
            isValid = false;
        }
        
        if (!data.unitPrice) {
            $(`#${prefix}-unit-price`).addClass('is-invalid');
            $(`#${prefix}-unit-price`).after('<div class="invalid-feedback">الرجاء إدخال سعر الوحدة</div>');
            isValid = false;
        }
        
        return isValid;
    }
    
    // Function to submit form via AJAX
    function submitFormViaAjax(data, prefix) {
        // Show loading indicator
        const submitBtn = $(`#${prefix}PackageModal .modal-footer .btn-primary`);
        const originalText = submitBtn.html();
        submitBtn.html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> جاري الحفظ...');
        submitBtn.prop('disabled', true);
        
        // In a real application, you would send the data to the server
        // For now, we'll simulate an AJAX call
        setTimeout(function () {
            // Reset button
            submitBtn.html(originalText);
            submitBtn.prop('disabled', false);
            
            // Close modal
            $(`#${prefix}PackageModal`).modal('hide');
            
            // Show success message
            alert('تم حفظ البيانات بنجاح');
            
            // Reload the DataTable
            dt.ajax.reload();
        }, 1500);
    }
    
    // Handle edit from view modal
    $('#editFromViewBtn').on('click', function() {
        $('#viewPackageModal').modal('hide');
        $('#editPackageModal').modal('show');
    });
});
$(function () {
    // Variable to track the currently selected row
    let selectedRow = null;
    
    // Initialize DataTable
    const dt = $("#categoriesTable").DataTable({
        paging: true,
        lengthChange: false,
        searching: false,
        ordering: true,
        info: true,
        autoWidth: false,
        responsive: true,
        // Add buttons extension
        dom: 'Bfrtip',
        buttons: [
            {
                extend: 'print',
                text: 'طباعه',
                className: 'btn btn-outline-secondary btn-sm',
                exportOptions: {
                    columns: ':visible'
                }
            },
            {
                extend: 'colvis',
                text: 'تحديد الحقول',
                className: 'btn btn-outline-secondary btn-sm',
                collectionLayout: 'fixed two-column'
            },
            {
                extend: 'excelHtml5',
                text: 'تصدير اكسل',
                className: 'btn btn-outline-secondary btn-sm',
                exportOptions: {
                    columns: ':visible'
                }
            }
        ],
        language: {
            emptyTable: "لا توجد بيانات",
            info: "إظهار _START_ إلى _END_ من _TOTAL_ سجل",
            infoEmpty: "إظهار 0 إلى 0 من 0",
            paginate: { first:"الأولى", last:"الأخيرة", next:"التالي", previous:"السابق" },
            buttons: {
                colvis: 'تحديد الحقول',
                print: 'طباعه',
                excel: 'تصدير اكسل'
            }
        }
    });
    
    // Move buttons to filter section
    dt.buttons().container().appendTo('#datatables-buttons-container');
    
    // Hide the default buttons container since we're using custom buttons
    $('.dt-buttons').hide();
    
    // Reinitialize buttons when filter section is shown
    $('#toggleFilters').on('click', function() {
        setTimeout(function() {
            // Refresh button styles when filter section is toggled
            $('.dt-buttons .btn').addClass('btn-sm');
        }, 100);
    });
    
    // Ensure buttons are properly styled after initialization
    setTimeout(function() {
        $('.dt-buttons .btn').addClass('btn-sm');
    }, 500);
    
    // Handle filter toggle button
    $('#toggleFilters').on('click', function() {
        var filterSection = $('#filterSection');
        var icon = $(this).find('i');
        var textSpan = $('#toggleFiltersText');
        
        if (filterSection.is(':visible')) {
            // Hide the filter section
            filterSection.hide();
            icon.removeClass('ti-filter-off').addClass('ti-filter');
            textSpan.text('إظهار الفلترة');
        } else {
            // Show the filter section
            filterSection.show();
            icon.removeClass('ti-filter').addClass('ti-filter-off');
            textSpan.text('إخفاء الفلترة');
        }
    });
    
    // Initialize bootstrap-select for category selection with enhanced options
    function initializeSelectPicker() {
        $('.selectpicker').selectpicker({
            style: 'btn-light',
            liveSearch: true,
            liveSearchPlaceholder: 'ابحث...',
            noneSelectedText: 'لم يتم تحديد أي شيء',
            noneResultsText: 'لا توجد نتائج لـ {0}',
            selectAllText: 'تحديد الكل',
            deselectAllText: 'إلغاء تحديد الكل',
            dropupAuto: false,   // منع السلوك التلقائي
            width: '100%',
            container: 'body'    // إخراج القائمة خارج أي كارد/مودال
        });
    }
    
    // Initialize selectpickers when document is ready
    initializeSelectPicker();
    
    // Re-initialize bootstrap-select when modals are shown or hidden
    $('.modal').on('shown.bs.modal hidden.bs.modal', function () {
        $('.selectpicker').selectpicker('refresh');
    });

    // Handle reset filters button
    $('#resetFilters').on('click', function() {
        // Reset all filter input fields
        $('#filter-id').val('');
        $('#filter-package-name').val('');
        $('#filter-price').val('');
        $('#filter-year').selectpicker('val', '');
        $('#filter-records').selectpicker('val', '');
        $('.selectpicker').selectpicker('refresh');
        alert('تم إعادة تعيين الفلاتر');
    });
    
    // Handle row selection
    $('#categoriesTable tbody').on('click', 'tr', function(e) {
        // Prevent row selection when clicking on action buttons or dropdowns
        if ($(e.target).closest('.dropdown-toggle, .dropdown-menu, .btn').length) {
            return;
        }
        
        // Toggle selection
        if ($(this).hasClass('selected')) {
            $(this).removeClass('selected');
            selectedRow = null;
        } else {
            // Remove selection from other rows
            $('#categoriesTable tbody tr.selected').removeClass('selected');
            $(this).addClass('selected');
            selectedRow = $(this);
        }
        
        // Enable/disable top action buttons based on selection
        if (selectedRow) {
            $('#topEditButton, #topViewButton').removeClass('disabled');
        } else {
            $('#topEditButton, #topViewButton').addClass('disabled');
        }
    });
    
    // Handle select all checkbox
    $('#selectAll').on('change', function() {
        const isChecked = $(this).is(':checked');
        $('.category-checkbox').prop('checked', isChecked);
        
        // If all rows are selected, enable top action buttons
        if (isChecked) {
            $('#topEditButton, #topViewButton').removeClass('disabled');
        } else {
            $('#topEditButton, #topViewButton').addClass('disabled');
            selectedRow = null;
        }
    });
    
    // Handle individual checkbox selection
    $('#categoriesTable tbody').on('change', '.category-checkbox', function() {
        // If any checkbox is checked, enable top action buttons
        if ($('.category-checkbox:checked').length > 0) {
            $('#topEditButton, #topViewButton').removeClass('disabled');
        } else {
            $('#topEditButton, #topViewButton').addClass('disabled');
            selectedRow = null;
        }
    });
    
    // Handle top action buttons
    $('#topEditButton').on('click', function(e) {
        e.preventDefault();
        if (selectedRow) {
            editPackage(selectedRow);
        } else {
            alert('الرجاء تحديد صف أولاً');
        }
    });
    
    $('#topViewButton').on('click', function(e) {
        e.preventDefault();
        if (selectedRow) {
            viewPackage(selectedRow);
        } else {
            alert('الرجاء تحديد صف أولاً');
        }
    });
    
    // Handle action buttons in the table
    $('#categoriesTable').on('click', '[data-action]', function (e) {
        e.preventDefault(); // Prevent default action
        const action = $(this).data('action');
        const row = $(this).closest('tr');
        
        switch (action) {
            case 'view':
                viewPackage(row);
                break;
            case 'edit':
                editPackage(row);
                break;
        }
    });
    
    // Function to view package
    function viewPackage(row) {
        // In a real application, you would fetch the data from the server
        // For now, we'll just show the modal
        console.log('Showing view modal');
        $('#viewPackageModal').modal('show');
    }
    
    // Function to edit package
    function editPackage(row) {
        // In a real application, you would populate the form with data from the server
        // For now, we'll just show the modal
        console.log('Showing edit modal');
        $('#editPackageModal').modal('show');
    }
    
    // Handle form submissions with AJAX
    $('#addPackageForm, #editPackageForm').on('submit', function (e) {
        e.preventDefault();
        
        const form = $(this);
        const formId = form.attr('id');
        const prefix = formId === 'addPackageForm' ? 'add' : 'edit';
        
        // Get form data
        const formData = getFormData(prefix);
        
        // Validate form
        if (!validateForm(formData, prefix)) {
            return;
        }
        
        // Submit form via AJAX
        submitFormViaAjax(formData, prefix);
    });
    
    // Handle save button click in modal footer
    $('#addPackageModal .modal-footer .btn-primary, #editPackageModal .modal-footer .btn-primary').on('click', function () {
        const modal = $(this).closest('.modal');
        const form = modal.find('form');
        const formId = form.attr('id');
        const prefix = formId === 'addPackageForm' ? 'add' : 'edit';
        
        // Get form data
        const formData = getFormData(prefix);
        
        // Validate form
        if (!validateForm(formData, prefix)) {
            return;
        }
        
        // Submit form via AJAX
        submitFormViaAjax(formData, prefix);
    });
    
    // Function to get form data
    function getFormData(prefix) {
        const data = {
            packageName: $(`#${prefix}-package-name`).val(),
            price: $(`#${prefix}-price`).val()
        };
        
        return data;
    }
    
    // Function to validate form
    function validateForm(data, prefix) {
        let isValid = true;
        
        // Clear previous validation states
        $('.is-invalid').removeClass('is-invalid');
        $('.invalid-feedback').remove();
        
        // Validate required fields
        if (!data.packageName) {
            $(`#${prefix}-package-name`).addClass('is-invalid');
            $(`#${prefix}-package-name`).after('<div class="invalid-feedback">الرجاء إدخال اسم الباقة</div>');
            isValid = false;
        }
        
        if (!data.price) {
            $(`#${prefix}-price`).addClass('is-invalid');
            $(`#${prefix}-price`).after('<div class="invalid-feedback">الرجاء إدخال السعر</div>');
            isValid = false;
        }
        
        return isValid;
    }
    
    // Function to submit form via AJAX
    function submitFormViaAjax(data, prefix) {
        // Show loading indicator
        const submitBtn = $(`#${prefix}PackageModal .modal-footer .btn-primary`);
        const originalText = submitBtn.html();
        submitBtn.html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> جاري الحفظ...');
        submitBtn.prop('disabled', true);
        
        // In a real application, you would send the data to the server
        // For now, we'll simulate an AJAX call
        setTimeout(function () {
            // Reset button
            submitBtn.html(originalText);
            submitBtn.prop('disabled', false);
            
            // Close modal
            $(`#${prefix}PackageModal`).modal('hide');
            
            // Show success message
            alert('تم حفظ البيانات بنجاح');
            
            // Reload the DataTable
            dt.ajax.reload();
        }, 1500);
    }
    
    // Handle edit from view modal
    $('#editFromViewBtn').on('click', function() {
        $('#viewPackageModal').modal('hide');
        $('#editPackageModal').modal('show');
    });
});
